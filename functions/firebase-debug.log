[debug] [2025-01-15T21:57:31.700Z] ----------------------------------------------------------------------
[debug] [2025-01-15T21:57:31.701Z] Command:       /Users/koates/.nvm/versions/node/v20.11.1/bin/node /Users/koates/.nvm/versions/node/v20.11.1/bin/firebase deploy --only functions:migrateUsersToTypesense
[debug] [2025-01-15T21:57:31.702Z] CLI Version:   13.29.1
[debug] [2025-01-15T21:57:31.702Z] Platform:      darwin
[debug] [2025-01-15T21:57:31.702Z] Node Version:  v20.11.1
[debug] [2025-01-15T21:57:31.702Z] Time:          Wed Jan 15 2025 16:57:31 GMT-0500 (Eastern Standard Time)
[debug] [2025-01-15T21:57:31.702Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-01-15T21:57:31.739Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2025-01-15T21:57:31.739Z] > authorizing via signed-in user (kelsey.oates@gmail.com)
[debug] [2025-01-15T21:57:31.739Z] [iam] checking project selfadvocacywins-acb4f for permissions ["cloudfunctions.functions.create","cloudfunctions.functions.delete","cloudfunctions.functions.get","cloudfunctions.functions.list","cloudfunctions.functions.update","cloudfunctions.operations.get","firebase.projects.get"]
[debug] [2025-01-15T21:57:31.740Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:31.740Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:31.740Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/selfadvocacywins-acb4f:testIamPermissions [none]
[debug] [2025-01-15T21:57:31.740Z] >>> [apiv2][(partial)header] POST https://cloudresourcemanager.googleapis.com/v1/projects/selfadvocacywins-acb4f:testIamPermissions x-goog-quota-user=projects/selfadvocacywins-acb4f
[debug] [2025-01-15T21:57:31.740Z] >>> [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/selfadvocacywins-acb4f:testIamPermissions {"permissions":["cloudfunctions.functions.create","cloudfunctions.functions.delete","cloudfunctions.functions.get","cloudfunctions.functions.list","cloudfunctions.functions.update","cloudfunctions.operations.get","firebase.projects.get"]}
[debug] [2025-01-15T21:57:32.091Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/selfadvocacywins-acb4f:testIamPermissions 200
[debug] [2025-01-15T21:57:32.092Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/selfadvocacywins-acb4f:testIamPermissions {"permissions":["cloudfunctions.functions.create","cloudfunctions.functions.delete","cloudfunctions.functions.get","cloudfunctions.functions.list","cloudfunctions.functions.update","cloudfunctions.operations.get","firebase.projects.get"]}
[debug] [2025-01-15T21:57:32.092Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:32.092Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:32.093Z] >>> [apiv2][query] POST https://iam.googleapis.com/v1/projects/selfadvocacywins-acb4f/serviceAccounts/selfadvocacywins-acb4f@appspot.gserviceaccount.com:testIamPermissions [none]
[debug] [2025-01-15T21:57:32.093Z] >>> [apiv2][body] POST https://iam.googleapis.com/v1/projects/selfadvocacywins-acb4f/serviceAccounts/selfadvocacywins-acb4f@appspot.gserviceaccount.com:testIamPermissions {"permissions":["iam.serviceAccounts.actAs"]}
[debug] [2025-01-15T21:57:32.332Z] <<< [apiv2][status] POST https://iam.googleapis.com/v1/projects/selfadvocacywins-acb4f/serviceAccounts/selfadvocacywins-acb4f@appspot.gserviceaccount.com:testIamPermissions 404
[debug] [2025-01-15T21:57:32.332Z] <<< [apiv2][body] POST https://iam.googleapis.com/v1/projects/selfadvocacywins-acb4f/serviceAccounts/selfadvocacywins-acb4f@appspot.gserviceaccount.com:testIamPermissions {"error":{"code":404,"message":"Unknown service account","status":"NOT_FOUND"}}
[debug] [2025-01-15T21:57:32.333Z] [functions] service account IAM check errored, deploy may fail: Request to https://iam.googleapis.com/v1/projects/selfadvocacywins-acb4f/serviceAccounts/selfadvocacywins-acb4f@appspot.gserviceaccount.com:testIamPermissions had HTTP Error: 404, Unknown service account {"name":"FirebaseError","children":[],"context":{"body":{"error":{"code":404,"message":"Unknown service account","status":"NOT_FOUND"}},"response":{"statusCode":404}},"exit":1,"message":"Request to https://iam.googleapis.com/v1/projects/selfadvocacywins-acb4f/serviceAccounts/selfadvocacywins-acb4f@appspot.gserviceaccount.com:testIamPermissions had HTTP Error: 404, Unknown service account","status":404}
[info] 
[info] === Deploying to 'selfadvocacywins-acb4f'...
[info] 
[info] i  deploying functions 
[info] Running command: npm --prefix "$RESOURCE_DIR" run lint
[info] ✔  functions: Finished running predeploy script. 
[debug] [2025-01-15T21:57:32.839Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:32.839Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:32.839Z] >>> [apiv2][query] GET https://cloudresourcemanager.googleapis.com/v1/projects/selfadvocacywins-acb4f [none]
[debug] [2025-01-15T21:57:32.945Z] <<< [apiv2][status] GET https://cloudresourcemanager.googleapis.com/v1/projects/selfadvocacywins-acb4f 200
[debug] [2025-01-15T21:57:32.945Z] <<< [apiv2][body] GET https://cloudresourcemanager.googleapis.com/v1/projects/selfadvocacywins-acb4f {"projectNumber":"142115352134","projectId":"selfadvocacywins-acb4f","lifecycleState":"ACTIVE","name":"SelfAdvocacyWins","labels":{"firebase":"enabled","firebase-core":"disabled"},"createTime":"2024-12-25T16:22:28.257166Z"}
[info] i  functions: preparing codebase default for deployment 
[info] i  functions: ensuring required API cloudfunctions.googleapis.com is enabled... 
[debug] [2025-01-15T21:57:32.946Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:32.946Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:32.946Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:32.946Z] Checked if tokens are valid: true, expires at: 1736980325999
[info] i  functions: ensuring required API cloudbuild.googleapis.com is enabled... 
[debug] [2025-01-15T21:57:32.946Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:32.946Z] Checked if tokens are valid: true, expires at: 1736980325999
[info] i  artifactregistry: ensuring required API artifactregistry.googleapis.com is enabled... 
[debug] [2025-01-15T21:57:32.946Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:32.946Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:32.947Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/cloudfunctions.googleapis.com [none]
[debug] [2025-01-15T21:57:32.947Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/cloudfunctions.googleapis.com x-goog-quota-user=projects/selfadvocacywins-acb4f
[debug] [2025-01-15T21:57:32.948Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/runtimeconfig.googleapis.com [none]
[debug] [2025-01-15T21:57:32.948Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/runtimeconfig.googleapis.com x-goog-quota-user=projects/selfadvocacywins-acb4f
[debug] [2025-01-15T21:57:32.949Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/cloudbuild.googleapis.com [none]
[debug] [2025-01-15T21:57:32.949Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/cloudbuild.googleapis.com x-goog-quota-user=projects/selfadvocacywins-acb4f
[debug] [2025-01-15T21:57:32.949Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/artifactregistry.googleapis.com [none]
[debug] [2025-01-15T21:57:32.949Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/artifactregistry.googleapis.com x-goog-quota-user=projects/selfadvocacywins-acb4f
[debug] [2025-01-15T21:57:33.389Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/runtimeconfig.googleapis.com 200
[debug] [2025-01-15T21:57:33.389Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/runtimeconfig.googleapis.com [omitted]
[debug] [2025-01-15T21:57:33.390Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/cloudfunctions.googleapis.com 200
[debug] [2025-01-15T21:57:33.390Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/cloudfunctions.googleapis.com [omitted]
[info] ✔  functions: required API cloudfunctions.googleapis.com is enabled 
[debug] [2025-01-15T21:57:33.391Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/artifactregistry.googleapis.com 200
[debug] [2025-01-15T21:57:33.392Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/artifactregistry.googleapis.com [omitted]
[info] ✔  artifactregistry: required API artifactregistry.googleapis.com is enabled 
[debug] [2025-01-15T21:57:33.392Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/cloudbuild.googleapis.com 200
[debug] [2025-01-15T21:57:33.392Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/cloudbuild.googleapis.com [omitted]
[info] ✔  functions: required API cloudbuild.googleapis.com is enabled 
[debug] [2025-01-15T21:57:33.392Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:33.392Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:33.392Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/selfadvocacywins-acb4f/adminSdkConfig [none]
[debug] [2025-01-15T21:57:33.883Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/selfadvocacywins-acb4f/adminSdkConfig 200
[debug] [2025-01-15T21:57:33.884Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/selfadvocacywins-acb4f/adminSdkConfig {"projectId":"selfadvocacywins-acb4f","storageBucket":"selfadvocacywins-acb4f.firebasestorage.app"}
[debug] [2025-01-15T21:57:33.884Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:33.885Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:33.885Z] >>> [apiv2][query] GET https://runtimeconfig.googleapis.com/v1beta1/projects/selfadvocacywins-acb4f/configs [none]
[debug] [2025-01-15T21:57:34.092Z] <<< [apiv2][status] GET https://runtimeconfig.googleapis.com/v1beta1/projects/selfadvocacywins-acb4f/configs 200
[debug] [2025-01-15T21:57:34.093Z] <<< [apiv2][body] GET https://runtimeconfig.googleapis.com/v1beta1/projects/selfadvocacywins-acb4f/configs {"configs":[{"name":"projects/selfadvocacywins-acb4f/configs/stripe"}]}
[debug] [2025-01-15T21:57:34.094Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:34.094Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:34.094Z] >>> [apiv2][query] GET https://runtimeconfig.googleapis.com/v1beta1/projects/selfadvocacywins-acb4f/configs/stripe/variables [none]
[debug] [2025-01-15T21:57:34.204Z] <<< [apiv2][status] GET https://runtimeconfig.googleapis.com/v1beta1/projects/selfadvocacywins-acb4f/configs/stripe/variables 200
[debug] [2025-01-15T21:57:34.205Z] <<< [apiv2][body] GET https://runtimeconfig.googleapis.com/v1beta1/projects/selfadvocacywins-acb4f/configs/stripe/variables {"variables":[{"name":"projects/selfadvocacywins-acb4f/configs/stripe/variables/webhook_secret","updateTime":"2025-01-04T19:15:14.340082426Z"},{"name":"projects/selfadvocacywins-acb4f/configs/stripe/variables/secret","updateTime":"2025-01-04T19:15:12.254818513Z"}]}
[debug] [2025-01-15T21:57:34.205Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:34.205Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:34.205Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:34.205Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:34.206Z] >>> [apiv2][query] GET https://runtimeconfig.googleapis.com/v1beta1/projects/selfadvocacywins-acb4f/configs/stripe/variables/webhook_secret [none]
[debug] [2025-01-15T21:57:34.207Z] >>> [apiv2][query] GET https://runtimeconfig.googleapis.com/v1beta1/projects/selfadvocacywins-acb4f/configs/stripe/variables/secret [none]
[debug] [2025-01-15T21:57:34.370Z] <<< [apiv2][status] GET https://runtimeconfig.googleapis.com/v1beta1/projects/selfadvocacywins-acb4f/configs/stripe/variables/secret 200
[debug] [2025-01-15T21:57:34.370Z] <<< [apiv2][body] GET https://runtimeconfig.googleapis.com/v1beta1/projects/selfadvocacywins-acb4f/configs/stripe/variables/secret {"name":"projects/selfadvocacywins-acb4f/configs/stripe/variables/secret","updateTime":"2025-01-04T19:15:12.254818513Z","text":"sk_test_5iwXahUlMmEEjqQkE4KddFI2"}
[debug] [2025-01-15T21:57:34.383Z] <<< [apiv2][status] GET https://runtimeconfig.googleapis.com/v1beta1/projects/selfadvocacywins-acb4f/configs/stripe/variables/webhook_secret 200
[debug] [2025-01-15T21:57:34.384Z] <<< [apiv2][body] GET https://runtimeconfig.googleapis.com/v1beta1/projects/selfadvocacywins-acb4f/configs/stripe/variables/webhook_secret {"name":"projects/selfadvocacywins-acb4f/configs/stripe/variables/webhook_secret","updateTime":"2025-01-04T19:15:14.340082426Z","text":"whsec_45TCT7uHzJFBfykkOEdguj61OFuQLIn2"}
[debug] [2025-01-15T21:57:34.387Z] Validating nodejs source
[debug] [2025-01-15T21:57:34.818Z] > [functions] package.json contents: {
  "name": "functions",
  "description": "Cloud Functions for Firebase",
  "scripts": {
    "lint": "eslint .",
    "serve": "firebase emulators:start --only functions",
    "shell": "firebase functions:shell",
    "start": "npm run shell",
    "deploy": "firebase deploy --only functions",
    "logs": "firebase functions:log"
  },
  "engines": {
    "node": "20"
  },
  "main": "index.js",
  "dependencies": {
    "@react-native-picker/picker": "^2.10.2",
    "cors": "^2.8.5",
    "express": "^4.21.2",
    "firebase-admin": "^11.11.1",
    "firebase-functions": "^6.2.0",
    "react-native-multiple-select": "^0.5.12",
    "stripe": "^12.18.0",
    "typesense": "^1.8.2"
  },
  "devDependencies": {
    "eslint": "^8.15.0",
    "eslint-config-google": "^0.14.0"
  },
  "private": true
}
[debug] [2025-01-15T21:57:34.818Z] Building nodejs source
[info] i  functions: Loading and analyzing source code for codebase default to determine what to deploy 
[debug] [2025-01-15T21:57:34.818Z] Could not find functions.yaml. Must use http discovery
[debug] [2025-01-15T21:57:34.822Z] Found firebase-functions binary at '/Users/koates/SelfAdvocacyWins/functions/node_modules/.bin/firebase-functions'
[info] Serving at port 8286

[debug] [2025-01-15T21:57:35.251Z] Got response from /__/functions.yaml {"endpoints":{"stripeWebhook":{"availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":null,"ingressSettings":null,"concurrency":null,"serviceAccountEmail":null,"vpc":null,"platform":"gcfv2","labels":{},"httpsTrigger":{},"entryPoint":"stripeWebhook"},"onUserUpdateTypesense":{"availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":null,"ingressSettings":null,"concurrency":null,"serviceAccountEmail":null,"vpc":null,"platform":"gcfv2","labels":{},"eventTrigger":{"eventType":"google.cloud.firestore.document.v1.written","eventFilters":{"database":"(default)","namespace":"(default)"},"eventFilterPathPatterns":{"document":"users/{userId}"},"retry":false},"entryPoint":"onUserUpdateTypesense"},"migrateUsersToTypesense":{"availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":null,"ingressSettings":null,"concurrency":null,"serviceAccountEmail":null,"vpc":null,"platform":"gcfv2","labels":{},"httpsTrigger":{},"entryPoint":"migrateUsersToTypesense"}},"specVersion":"v1alpha1","requiredAPIs":[],"extensions":{}}
[info] i  extensions: ensuring required API firebaseextensions.googleapis.com is enabled... 
[debug] [2025-01-15T21:57:40.271Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:40.271Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:40.271Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/firebaseextensions.googleapis.com [none]
[debug] [2025-01-15T21:57:40.272Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/firebaseextensions.googleapis.com x-goog-quota-user=projects/selfadvocacywins-acb4f
[debug] [2025-01-15T21:57:40.760Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/firebaseextensions.googleapis.com 200
[debug] [2025-01-15T21:57:40.760Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/firebaseextensions.googleapis.com [omitted]
[info] ✔  extensions: required API firebaseextensions.googleapis.com is enabled 
[debug] [2025-01-15T21:57:40.761Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2025-01-15T21:57:40.761Z] > authorizing via signed-in user (kelsey.oates@gmail.com)
[debug] [2025-01-15T21:57:40.761Z] [iam] checking project selfadvocacywins-acb4f for permissions ["firebase.projects.get","firebaseextensions.instances.list"]
[debug] [2025-01-15T21:57:40.761Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:40.761Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:40.762Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/selfadvocacywins-acb4f:testIamPermissions [none]
[debug] [2025-01-15T21:57:40.762Z] >>> [apiv2][(partial)header] POST https://cloudresourcemanager.googleapis.com/v1/projects/selfadvocacywins-acb4f:testIamPermissions x-goog-quota-user=projects/selfadvocacywins-acb4f
[debug] [2025-01-15T21:57:40.762Z] >>> [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/selfadvocacywins-acb4f:testIamPermissions {"permissions":["firebase.projects.get","firebaseextensions.instances.list"]}
[debug] [2025-01-15T21:57:40.966Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/selfadvocacywins-acb4f:testIamPermissions 200
[debug] [2025-01-15T21:57:40.966Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/selfadvocacywins-acb4f:testIamPermissions {"permissions":["firebase.projects.get","firebaseextensions.instances.list"]}
[debug] [2025-01-15T21:57:40.967Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:40.967Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:40.968Z] >>> [apiv2][query] GET https://firebaseextensions.googleapis.com/v1beta/projects/selfadvocacywins-acb4f/instances pageSize=100&pageToken=
[debug] [2025-01-15T21:57:41.363Z] <<< [apiv2][status] GET https://firebaseextensions.googleapis.com/v1beta/projects/selfadvocacywins-acb4f/instances 200
[debug] [2025-01-15T21:57:41.364Z] <<< [apiv2][body] GET https://firebaseextensions.googleapis.com/v1beta/projects/selfadvocacywins-acb4f/instances {"instances":[{"name":"projects/selfadvocacywins-acb4f/instances/firestore-algolia-search","createTime":"2025-01-14T18:09:50.599740Z","updateTime":"2025-01-14T18:15:19.615981Z","state":"ACTIVE","config":{"name":"projects/selfadvocacywins-acb4f/instances/firestore-algolia-search/configurations/71621815-e13a-44a8-a7df-fdd5aed914d6","createTime":"2025-01-14T18:09:50.599740Z","source":{"name":"projects/algolia-b2ebc/sources/a9ff9aba-022b-44af-83ef-04c8d1b85593","packageUri":"https://storage.googleapis.com/firebase-extensions-packages-prod/algolia-firestore-algolia-search-1.2.7-45aa5447-9f8b-46a6-95b9-5f7dbe3bda66.zip","hash":"9151b4368a9a5cee01940524e2c13b71929d366153f5cbd944edeb5c787b52c4","extensionRoot":"/","spec":{"specVersion":"v1beta","name":"firestore-algolia-search","version":"1.2.7","description":"Enables full text search of your Cloud Firestore data with Algolia.","roles":[{"role":"datastore.user","reason":"Allows this extension to access Cloud Firestore to read."}],"resources":[{"name":"executeIndexOperation","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.write\n  resource: projects/${PROJECT_ID}/databases/${DATABASE_ID}/documents/${COLLECTION_PATH}/{documentID}\nlocation: ${LOCATION}\nruntime: nodejs18\n","description":"Firestore document-triggered function that creates, updates, or deletes data in Algolia.","deletionPolicy":"DELETE"},{"name":"executeFullIndexOperation","type":"firebaseextensions.v1beta.function","propertiesYaml":"availableMemoryMb: 1024\nlocation: ${param:LOCATION}\nruntime: nodejs18\ntaskQueueTrigger: {}\ntimeout: 540s\n","description":"Loads all the data from your FireStore database into Algolia","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Algolia","url":"https://algolia.com"},"contributors":[{"authorName":"Sajid Momin","email":"sajid.momin@algolia.com","url":"https://github.com/smomin"}],"license":"Apache-2.0","sourceUrl":"https://github.com/algolia/firestore-algolia-search/tree/main","params":[{"param":"DATABASE_ID","label":"Database ID","type":"STRING","description":"Enter database that contains the collections that you want to monitor?\n","required":true,"default":"(default)","example":"test","immutable":true},{"param":"COLLECTION_PATH","label":"Collection Path","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should monitor for changes?\n","required":true,"example":"store","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"movies/{id}/actors\".","immutable":true},{"param":"FIELDS","label":"Indexable Fields","type":"STRING","description":"This can be a comma separated list or left blank to index all fields. For performance reasons, [record size is limited](https://www.algolia.com/doc/guides/sending-and-managing-data/prepare-your-data/in-depth/index-and-records-size-and-usage-limitations/#record-size-limits). If you're receiving errors that your records are too large, refer to the [reducing record size documentation](https://www.algolia.com/doc/guides/sending-and-managing-data/prepare-your-data/how-to/reducing-object-size/).\n","example":"name,category,price,sales"},{"param":"FORCE_DATA_SYNC","label":"Force Data Sync","type":"SELECT","description":"The extension uses approaches to mitigate race conditions but it might not be a 100% fool proof.  This setting will make sure the function is using the latest data from Firestore by making another read call before processing and sending to Algolia.  note: This will be a add to your usage of Firestore.","options":[{"value":"no","label":"No"},{"value":"yes","label":"Yes"}],"default":"no"},{"param":"ALGOLIA_INDEX_NAME","label":"Algolia Index Name","type":"STRING","description":"This is the name of the [Algolia index](https://www.algolia.com/doc/faq/basics/what-is-an-index/) where the records will be persisted. Refer to [naming your index](https://www.algolia.com/doc/guides/sending-and-managing-data/send-and-update-your-data/#naming-your-index) for more information.","required":true},{"param":"ALGOLIA_APP_ID","label":"Algolia Application Id","type":"STRING","description":"This is the Algolia application you want to index your data to. You can find your credentials including application ID on your Algolia dashboard, under the [API keys tab](https://www.algolia.com/api-keys).","required":true},{"param":"ALGOLIA_API_KEY","label":"Algolia API Key","type":"SECRET","description":"We recommend [creating a new API key](https://www.algolia.com/doc/guides/security/api-keys/#creating-and-managing-api-keys) with \"addObject\", \"deleteObject\", \"listIndexes\", \"deleteIndex\", \"editSettings\", and \"settings\" permissions. **Do not use the Admin API key**.","required":true},{"param":"ALT_OBJECT_ID","label":"Alternative Object Id","type":"STRING","description":"Specify an alternative Firestore document property to use for the Algolia record Id.  Use `(path)` if the document path is desired as the Algolia ObjectID.  The default is the Firestore document Id. **If you set this property, make sure to clear out the Algolia Index since the ObjectID will be different resulting in duplicate records.**"},{"param":"TRANSFORM_FUNCTION","label":"Transform Function Name (Experimental)","type":"STRING","description":"Specify a Firebase Cloud Function for any data transformation before saving into Algolia. Refer to [Call functions for your app](https://firebase.google.com/docs/functions/callable)."},{"param":"DO_FULL_INDEXING","label":"Full Index existing documents?","type":"SELECT","description":"Should existing documents in the Firestore collection be indexed as well?\n","required":true,"options":[{"value":"true","label":"Yes"},{"value":"false","label":"No"}]},{"param":"LOCATION","label":"Cloud Functions location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"immutable":true}],"preinstallContent":"Use this extension to index your Cloud Firestore data to Algolia and keep it synced.  The extension is applied and configured on a Firestore [collection](https://firebase.google.com/docs/firestore/data-model#collections).\n\nThis extension listens for changes on the specified collection. If you add a [document](https://firebase.google.com/docs/firestore/data-model#documents), the extension indexes it as a [record in Algolia](https://www.algolia.com/doc/faq/basics/what-is-a-record/). The extension only indexes the fields defined in the extension configuration and uses the [document Id](https://firebase.google.com/docs/firestore/manage-data/add-data#add_a_document) as the Algolia [object Id](https://www.algolia.com/doc/guides/sending-and-managing-data/send-and-update-your-data/#using-unique-object-identifiers).\n\nAnytime you update a document, the extension propagates the update to the corresponding Algolia record. If you delete a document, the extension removes the corresponding Algolia record.\n\n#### Important\n\nUpon installation or when the extension's configuration is changed, the documents in the specified collection will be synced to Algolia.\n\n#### Additional setup\n\nBefore installing this extension, make sure that you've\n[set up a Cloud Firestore database](https://firebase.google.com/docs/firestore/quickstart)\nin your Firebase project.\n\nYou must also have an Algolia account set up before installing this\nextension. You can do so on the [Algolia](https://www.algolia.com/) site.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n\nThis extension also uses the following third-party services:\n\n- Algolia ([pricing information](https://www.algolia.com/pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nYou will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See Cloud Functions under [Firebase Pricing](https://firebase.google.com/pricing) for a detailed explanation.\n","postinstallContent":"### See it in action\n\nYou can test out this extension right away:\n\n1.  Go to the [Cloud Firestore tab](https://console.firebase.google.com/project/${param:PROJECT_ID}/database/firestore/data).\n\n1.  If it doesn't exist already, create a collection called `${param:COLLECTION_PATH}`.\n\n1.  Create, update, or delete a document in the `${param:COLLECTION_PATH}` collection.  Go to Algolia's dashboard and verify in Algolia that a record is created, updated, or deleted in the `${param:ALGOLIA_INDEX_NAME}` index for application id `${param:ALGOLIA_APP_ID}`.\n\n### Collection import\n\nIf the collection named `${param:COLLECTION_PATH}` exists, the extension has begun importing documents into the `${param:ALGOLIA_INDEX_NAME}` Algolia Index. Additionally, a full reindex will occur each time the extension's configuration changes.\n\nA `lastmodified` attribute is added to Algolia records to eliminate race condition issues related from the Cloud Function cold start.\n\n### Using the extension\n\nThis extension listens to the Cloud Firestore collection `${param:COLLECTION_PATH}`. If you create, update, or delete a document within that collection, this extension will:\n\n- Indexes the document and send all the fields or configured fields defined in the extension.\n- or, removes the record from Algolia index if the document is deleted.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n","readmeContent":"# Search Firestore with Algolia\n\n**Author**: Algolia (**[https://www.algolia.com](https://www.algolia.com)**)\n\n**Description**: Enable full text search of your Cloud Firestore data with Algolia.\n\n**Details**: Use this extension to index your Cloud Firestore data to [Algolia](https://www.algolia.com/doc/) and keep it synced.\n\nYou can then [configure your relevance](/doc/guides/getting-started/how-algolia-works/in-depth/implementation-process/#configuring-relevance) using the [Algolia dashboard](https://www.algolia.com/dashboard) or [API clients](/doc/api-client/getting-started/install/javascript/). From there, you can use Algolia's [front-end libraries](/doc/guides/building-search-ui/what-is-instantsearch/js/) to incorporate search components into your Firebase app's UI.\n\n---\n\nWe welcome [bug reports and feature requests](https://github.com/algolia/firestore-algolia-search/issues/new) as well as pull requests in this GitHub repository.\n\n### Firebase CLI\n\n```bash\nfirebase ext:install algolia/firestore-algolia-search --project=<your-project-id>\n```\n\n> Learn more about installing extensions in the Firebase Extensions documentation: [console](https://firebase.google.com/docs/extensions/install-extensions?platform=console), [CLI](https://firebase.google.com/docs/extensions/install-extensions?platform=cli)\n\n---\n\n#### Details\n\nUse this extension to index your Cloud Firestore data to Algolia and keep it synced.  The extension is applied and configured on a Firestore [collection](https://firebase.google.com/docs/firestore/data-model#collections) or [subcollection](https://firebase.google.com/docs/firestore/data-model#subcollections).\n\nThis extension listens for changes on the specified collection. If you add a [document](https://firebase.google.com/docs/firestore/data-model#documents), the extension indexes it as a [record in Algolia](https://www.algolia.com/doc/faq/basics/what-is-a-record/). The extension only indexes the fields defined in the extension configuration and uses the [document Id](https://firebase.google.com/docs/firestore/manage-data/add-data#add_a_document) as the Algolia [object Id](https://www.algolia.com/doc/guides/sending-and-managing-data/send-and-update-your-data/#using-unique-object-identifiers).\n\nAnytime you update a document, the extension propagates the update to the corresponding Algolia record. If you delete a document, the extension removes the corresponding Algolia record.\n\n#### Additional setup\n\nBefore installing this extension, make sure that you've set up:\n- [Cloud Firestore database](https://firebase.google.com/docs/firestore/quickstart) in your Firebase project.\n- [Algolia](https://www.algolia.com/) account.\n\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n\nThis extension also uses the following third-party services:\n\n- Algolia ([pricing information](https://www.algolia.com/pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nYou will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See Cloud Functions under [Firebase Pricing](https://firebase.google.com/pricing) for a detailed explanation.\n\n#### Configuration Parameters\n\nCloud Functions Location: Where do you want to deploy the functions created for this extension?\n  You usually want a location close to your database.\n  For help selecting a location, refer to the\n  [location selection guide](https://firebase.google.com/docs/functions/locations).\n- Database Id: Enter the database id that contains the collection(s) that you want to monitor?\n  Firebase supports [multiple databases](https://cloud.google.com/blog/products/databases/manage-multiple-firestore-databases-in-a-project) in a project.  In order to use a non default database, enter the database Id.\n\n- Collection Path: What is the path to the Cloud Firestore collection where the extension should monitor for changes?\n  For subcollection, the syntax is `parent_collection/{parentId}/target_collection`. (please note, there is not depublication process on subcollections).\n\n- Fields: What document fields should be indexed to provide the best search experience? For more information on which fields to index to Algolia, see the [Algolia documentation on records](https://www.algolia.com/doc/guides/sending-and-managing-data/prepare-your-data/#algolia-records).\n  This can be a comma separated list or left blank to index all fields.\n  For performance reasons, [record size is limited](https://www.algolia.com/doc/guides/sending-and-managing-data/prepare-your-data/in-depth/index-and-records-size-and-usage-limitations/#record-size-limits).\n  If you're receiving errors that your records are too large, refer to the [reducing record size documentation](https://www.algolia.com/doc/guides/sending-and-managing-data/prepare-your-data/how-to/reducing-object-size/).\n\n- Force Data Sync: Are you facing data inconsistent issues possibly due to race conditions?\n  This setting will make sure the function is using the latest data from Firestore by making another read call before processing and sending to Algolia.\n\n- Algolia Application ID: What is the Algolia Application Id?\n  This is the Algolia application you want to index your data to.\n  You can find your credentials including application ID on your Algolia dashboard,\n  under the [API keys tab](https://www.algolia.com/api-keys).\n\n- Algolia API Key: What is your Algolia API key?\n  We recommend [creating a new API key](https://www.algolia.com/doc/guides/security/api-keys/#creating-and-managing-api-keys)\n  with \"addObject\", \"deleteObject\", \"listIndexes\", \"deleteIndex\", \"editSettings\", and \"settings\" permissions.\n  **Do not use the Admin API key**.\n\n- Algolia Index Name: What is the Algolia index name?\n  This is the name of the [Algolia index](https://www.algolia.com/doc/faq/basics/what-is-an-index/)\n  where the records will be persisted.\n  Refer to [naming your index](https://www.algolia.com/doc/guides/sending-and-managing-data/send-and-update-your-data/#naming-your-index) for more information.\n\n- Alternative Object Id: Are you looking to use another Firestore document property or document path as the Algolia ObjectID?\n  Specify an alternative Firestore document property to use for the Algolia record Id.  Use `(path)` if the document path is desired as the Algolia ObjectID.  The default is the Firestore document Id.\n  **If you set this property, make sure to clear out the Algolia Index since the ObjectID will be different resulting in duplicate records.**\n\n- Transform Function Name (experimental): What is the Firebase Cloud Function Name?\n  This is the name of the Firestore Cloud Function for transforming the data before transmitting to Algolia for indexing.\n  This function should be deployed to the same Firebase Project and Location as the Firestore/Algolia extension.\n  Refer to [Call functions for your app](https://firebase.google.com/docs/functions/callable).\n  Below is an example of a Transform function used for my testing:\n  ```javascript\n    import * as functions from \"firebase-functions\";\n\n    const doStuffToData = (payload: any) => {\n      return {\n      ...payload,\n      \"hello\": \"world\",\n      };\n    };\n\n    export const helloWorld = functions.https.onCall((payload) => {\n      const transformedData = doStuffToData(payload);\n      return transformedData;\n    });\n  ```\n  **Note**: The Transform Firebase Function should be set up to unauthenticated users at this time.\n\n#### Cloud Functions\n\n- **executeIndexOperation:** Firestore document-triggered function that creates, updates, or deletes data in Algolia.\n","externalServices":[{"name":"Algolia","pricingUri":"https://algolia.com/pricing"}],"lifecycleEvents":[{"stage":"ON_INSTALL","processingMessage":"Indexing existing documents in ${COLLECTION_PATH}","taskQueueTriggerFunction":"executeFullIndexOperation"},{"stage":"ON_UPDATE","processingMessage":"Indexing existing documents in ${COLLECTION_PATH}","taskQueueTriggerFunction":"executeFullIndexOperation"},{"stage":"ON_CONFIGURE","processingMessage":"Indexing existing documents in ${COLLECTION_PATH}","taskQueueTriggerFunction":"executeFullIndexOperation"}],"displayName":"Search Firestore with Algolia","tags":["ai","search","semantic-search","vector-search","text-search"]},"fetchTime":"2024-07-05T04:35:11.264165Z","lastOperationName":"projects/algolia-b2ebc/operations/ea678f9d-3a07-446f-b67b-1edf37a705e0","state":"ACTIVE"},"params":{"DATABASE_ID":"(default)","ALGOLIA_INDEX_NAME":"users_friends","ALGOLIA_APP_ID":"701AYQP8O7","DO_FULL_INDEXING":"true","FIELDS":"state, age, winTopics, questionAnswers.selectedWords, questionAnswers.textAnswer, gender, lookingFor, profilePicture, username","ALGOLIA_API_KEY":"projects/142115352134/secrets/firestore-algolia-search-ALGOLIA_API_KEY/versions/1","FORCE_DATA_SYNC":"no","LOCATION":"us-central1","COLLECTION_PATH":"users"},"populatedPostinstallContent":"### See it in action\n\nYou can test out this extension right away:\n\n1.  Go to the [Cloud Firestore tab](https://console.firebase.google.com/project/selfadvocacywins-acb4f/database/firestore/data).\n\n1.  If it doesn't exist already, create a collection called `users`.\n\n1.  Create, update, or delete a document in the `users` collection.  Go to Algolia's dashboard and verify in Algolia that a record is created, updated, or deleted in the `users_friends` index for application id `701AYQP8O7`.\n\n### Collection import\n\nIf the collection named `users` exists, the extension has begun importing documents into the `users_friends` Algolia Index. Additionally, a full reindex will occur each time the extension's configuration changes.\n\nA `lastmodified` attribute is added to Algolia records to eliminate race condition issues related from the Cloud Function cold start.\n\n### Using the extension\n\nThis extension listens to the Cloud Firestore collection `users`. If you create, update, or delete a document within that collection, this extension will:\n\n- Indexes the document and send all the fields or configured fields defined in the extension.\n- or, removes the record from Algolia index if the document is deleted.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n","extensionRef":"algolia/firestore-algolia-search","extensionVersion":"1.2.7","systemParams":{"firebaseextensions.v1beta.function/vpcConnectorEgressSettings":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","firebaseextensions.v1beta.function/minInstances":"0","firebaseextensions.v1beta.function/memory":"256"}},"lastOperationName":"projects/selfadvocacywins-acb4f/operations/8b0c9757-c414-47d3-b6a9-e2453da8d5ca","serviceAccountEmail":"ext-firestore-algolia-search@selfadvocacywins-acb4f.iam.gserviceaccount.com","lastOperationType":"CREATE","etag":"049eb0611795b0fd81f91d54355b0a9015aeee052db198859d554b3f547b2fcc","runtimeData":{"stateUpdateTime":"2025-01-14T18:15:19.431032934Z","processingState":{"state":"PROCESSING","detailMessage":"Indexing existing documents in users"}}},{"name":"projects/selfadvocacywins-acb4f/instances/firestore-multimodal-genai","createTime":"2025-01-05T13:44:07.464117Z","updateTime":"2025-01-05T14:28:34.067717Z","state":"ACTIVE","config":{"name":"projects/selfadvocacywins-acb4f/instances/firestore-multimodal-genai/configurations/c84306bf-3036-4523-bbe3-9c6763968601","createTime":"2025-01-05T14:23:47.246693Z","source":{"name":"projects/pub-ext-gcloud/sources/021e97bb-a867-4374-8acd-1655a0698202","packageUri":"https://storage.googleapis.com/firebase-extensions-packages-prod/googlecloud-firestore-multimodal-genai-1.0.1-2b720e3a-aaa4-42d8-b106-21d155f6dd12.zip","hash":"780f3e313a2e95cebb9ea839ccdd1d19dcdee5fd212c69fe891dba11d16e7fad","extensionRoot":"/","spec":{"specVersion":"v1beta","name":"firestore-multimodal-genai","version":"1.0.1","description":"Performs multimodel generative tasks on text and images, customizable with prompt engineering, using Gemini models and Firestore.","apis":[{"apiName":"aiplatform.googleapis.com","reason":"For access to the Vertex AI Gemini API if this provider is chosen."}],"roles":[{"role":"datastore.user","reason":"Allows this extension to access Cloud Firestore to read and process added messages."},{"role":"storage.objectAdmin","reason":"Allows the extension to read from your Cloud Storage."},{"role":"aiplatform.user","reason":"Allows this extension to access the Gemini family of genai models via Vertex AI if this provider is chosen."}],"resources":[{"name":"generateOnCall","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs18\n","description":"A callable function to perform generative AI tasks.","deletionPolicy":"DELETE"},{"name":"generateText","type":"firebaseextensions.v1beta.function","propertiesYaml":"availableMemoryMb: 2048\neventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.write\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${COLLECTION_NAME}/{summaryId}\nlocation: ${LOCATION}\nruntime: nodejs18\ntimeout: 540s\n","description":"Listens to Firestore data writes to perform generative AI tasks.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Google Cloud","url":"https://cloud.google.com"},"contributors":[{"authorName":"Invertase","email":"oss@invertase.io","url":"https://github.com/invertase"},{"authorName":"Jacob Cable","email":"jacob@invertase.io","url":"https://github.com/cabljac"},{"authorName":"Mais Alheraki","email":"mais@invertase.io","url":"https://github.com/pr-Mais"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/GoogleCloudPlatform/firebase-extensions/tree/main/firestore-multimodal-genai/CHANGELOG.md","sourceUrl":"https://github.com/GoogleCloudPlatform/firebase-extensions/tree/main/firestore-multimodal-genai","params":[{"param":"GENERATIVE_AI_PROVIDER","label":"Gemini API Provider","type":"SELECT","description":"This extension makes use of the Gemini family of large language models. Currently the extension supports the Google AI Gemini API (for developers) and the Vertex AI Gemini API. Learn more about the differences between the Google AI and Vertex AI Gemini APIs here.","required":true,"options":[{"value":"google-ai","label":"Google AI"},{"value":"vertex-ai","label":"Vertex AI"}],"default":"google-ai"},{"param":"MODEL","label":"Gemini model","type":"STRING","description":"Input the name of the Gemini model you would like to use. To view available models for each provider, see: [Vertex AI Gemini models](https://cloud.google.com/vertex-ai/docs/generative-ai/learn/models), [Google AI Gemini models](https://ai.google.dev/models/gemini)","required":true,"default":"gemini-1.0-pro"},{"param":"API_KEY","label":"Google AI API Key","type":"SECRET","description":"If you have selected Google AI as your provider, then this parameteris required. If you have instead selected Vertex AI, then this parameter is not required, and application default credentials will be used."},{"param":"COLLECTION_NAME","label":"Firestore Collection Path","type":"STRING","description":"Used to store conversation history represented as documents. This extension will listen to the specified collection(s) for new message documents.","required":true,"default":"generate","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Must be a valid Cloud Firestore Collection"},{"param":"PROMPT","label":"Prompt","type":"STRING","description":"This is the text that you want the Gemini API to generate a response for. It can be free-form text or it can use handlebars variables to substitute values from the Firestore document. For example if you set this parameter as \"What is the capital of {{ country }}?\"","required":true},{"param":"IMAGE_FIELD","label":"Image field (Gemini Vision Models ONLY)","type":"STRING","description":"A document field containing a cloud storage URL of an image, or a base64 string of an image. Note that this field is only supported by Gemini, and only with the Gemini Pro Vision models. If you are using a text-only model, you should leave this field blank.","validationRegex":"^[a-zA-Z0-9_]+(,[a-zA-Z0-9_]+)*$","validationErrorMessage":"Field names may only use upper and lowercase letters from A to Z, underscores, or numbers, and may only be separated by commas. Trailing commas and empty variable names are not allowed."},{"param":"RESPONSE_FIELD","label":"Response Field","type":"STRING","description":"The field in the message document into which to put the response.","required":true,"default":"output"},{"param":"LOCATION","label":"Cloud Functions location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations). Note that Generative AI on Vertex AI is only available in the regions listed [here](https://cloud.google.com/vertex-ai/docs/generative-ai/learn/locations-genai). A list of languages and regions supported by the Gemini API on Google AI is [here](https://ai.google.dev/available_regions).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"immutable":true},{"param":"TEMPERATURE","label":"Temperature","type":"STRING","description":"Controls the randomness of the output. Values can range over [0,1], inclusive. A value closer to 1 will produce responses that are more varied, while a value closer to 0 will typically result in less surprising responses from the model.","validationRegex":"^(?:0*(?:\\.\\d+)?|1(\\.0*)?)$","validationErrorMessage":"Please specify a decimal representation of a number between 0 and 1."},{"param":"TOP_P","label":"Nucleus sampling probability","type":"STRING","description":"If specified, nucleus sampling will be used as the decoding strategy. Nucleus sampling considers the smallest set of tokens whose probability sum is at least a fixed value. Enter a value between 0 and 1.","validationRegex":"^(?:0*(?:\\.\\d+)?|1(\\.0*)?)$","validationErrorMessage":"Please specify a decimal representation of a number between 0 and 1."},{"param":"TOP_K","label":"Sampling strategy parameter","type":"STRING","description":"If specified, top-k sampling will be used as the decoding strategy. Top-k sampling considers the set of topK most probable tokens.","validationRegex":"^[1-9][0-9]*","validationErrorMessage":"Please specify a positive integer."},{"param":"CANDIDATE_COUNT","label":"Candidate count","type":"STRING","description":"When set to an integer higher than one, additional candidate responses, up to the specified number, will be stored in Firestore under the 'candidates' field.","default":"1","validationRegex":"^[1-9][0-9]*","validationErrorMessage":"Please specify a positive integer."},{"param":"CANDIDATES_FIELD","label":"Candidates field","type":"STRING","description":"The field in the message document into which to put the other candidate responses if the candidate count parameter is greater than one.","default":"candidates"},{"param":"HARM_CATEGORY_HATE_SPEECH","label":"Hate Speech Threshold","type":"SELECT","description":"Threshold for hate speech content. Specify what probability level of hate speech content is blocked by the Gemini provider.","options":[{"value":"HARM_BLOCK_THRESHOLD_UNSPECIFIED","label":"Default"},{"value":"BLOCK_LOW_AND_ABOVE","label":"Block low and above"},{"value":"BLOCK_MEDIUM_AND_ABOVE","label":"Block medium and above"},{"value":"BLOCK_ONLY_HIGH","label":"Block only high"},{"value":"BLOCK_NONE","label":"Block none"}],"default":"HARM_BLOCK_THRESHOLD_UNSPECIFIED"},{"param":"HARM_CATEGORY_DANGEROUS_CONTENT","label":"Dangerous Content Threshold","type":"SELECT","description":"Threshold for dangerous content. Specify what probability level of dangerous content is blocked by the Gemini provider.","options":[{"value":"HARM_BLOCK_THRESHOLD_UNSPECIFIED","label":"Default"},{"value":"BLOCK_LOW_AND_ABOVE","label":"Block low and above"},{"value":"BLOCK_MEDIUM_AND_ABOVE","label":"Block medium and above"},{"value":"BLOCK_ONLY_HIGH","label":"Block only high"},{"value":"BLOCK_NONE","label":"Block none"}],"default":"HARM_BLOCK_THRESHOLD_UNSPECIFIED"},{"param":"HARM_CATEGORY_HARASSMENT","label":"Harassment Content Threshold","type":"SELECT","description":"Threshold for harassment content. Specify what probability level of harassment content is blocked by the Gemini provider.","options":[{"value":"HARM_BLOCK_THRESHOLD_UNSPECIFIED","label":"Default"},{"value":"BLOCK_LOW_AND_ABOVE","label":"Block low and above"},{"value":"BLOCK_MEDIUM_AND_ABOVE","label":"Block medium and above"},{"value":"BLOCK_ONLY_HIGH","label":"Block only high"},{"value":"BLOCK_NONE","label":"Block none"}],"default":"HARM_BLOCK_THRESHOLD_UNSPECIFIED"},{"param":"HARM_CATEGORY_SEXUALLY_EXPLICIT","label":"Sexual Content Threshold","type":"SELECT","description":"Threshold for sexually explicit content. Specify what probability level of sexual content is blocked by the Gemini provider.","options":[{"value":"HARM_BLOCK_THRESHOLD_UNSPECIFIED","label":"Default"},{"value":"BLOCK_LOW_AND_ABOVE","label":"Block low and above"},{"value":"BLOCK_MEDIUM_AND_ABOVE","label":"Block medium and above"},{"value":"BLOCK_ONLY_HIGH","label":"Block only high"},{"value":"BLOCK_NONE","label":"Block none"}],"default":"HARM_BLOCK_THRESHOLD_UNSPECIFIED"}],"preinstallContent":"This extension allows you to perform generative tasks using the Gemini API, a custom prompt, and Firestore.\n\nOn installation, you will be asked to provide the following information:\n\n- **Gemini API Provider** This extension makes use of the Gemini family of models. Currently the extension supports the Google AI Gemini API and the Vertex AI Gemini API. Learn more about the differences between the Google AI and Vertex AI Gemini APIs [here](https://cloud.google.com/vertex-ai/docs/generative-ai/migrate/migrate-google-ai).\n\nNote that Generative AI on Vertex AI is only available in the regions listed [here](https://cloud.google.com/vertex-ai/docs/generative-ai/learn/locations-genai).\n\nA list of languages and regions supported by the Gemini API on Google AI is [here](https://ai.google.dev/available_regions).\n\n**Gemini Model**: Input the name of which Gemini model you would like to use. To view available models for each provider, see:\n\n- [Vertex AI Gemini models](https://cloud.google.com/vertex-ai/docs/generative-ai/learn/models)\n- [Google AI Gemini models](https://ai.google.dev/models/gemini)\n  **Firestore Collection Path**: This extension will listen to the specified collection(s) for new task documents.\n  **Prompt**: This is the text that you want the Gemini API to generate a response for. It can be free-form text or it can use handlebars variables to substitute values from the Firestore document.\n\nThis extension will listen to the specified collection for new documents. When such a document is added, the extension will:\n\n1. Substitute any variables from the document into the prompt.\n2. Query the Gemini API to generate a response based on the prompt.\n3. Write the response from the Model API back to the triggering document in the response field.\n\nAdditionally the extension deploys a callable function, which may be called with data containing the values for handlebar substitution.\n\nNote that the extension only supports top-level handlebars variables, substitution into nested handlebar templates is not supported.\n\nEach instance of the extension should be configured to perform one particular task. If you have multiple tasks, you can install multiple instances.\n\nFor example, you could use this extension to:\n\n- Predict star ratings on a collection of product reviews.\n- Classify customer feedback as positive, negative, or neutral.\n- Summarize long articles.\n- Extract named entities from text.\n- Generate creative text, such as poems or code.\n\nHere’s an example prompt used for predicting star ratings on a collection of product reviews:\n\n```\nProvide a star rating from 1-5 of the following review text: “This is a truly incredible water bottle, I keep it with me all the time when I’m traveling and it has never let me down.”\n5\n\nProvide a star rating from 1-5 of the following review text: “I really enjoyed the water bottle, I just wish they carried this in a larger size as I go for long hikes. But overall the aesthetic, manufacturing, and functional design are great for what I needed.”\n4\n\nProvide a star rating from 1-5 of the following review text: “The water bottle was fine, although the design was a bit lacking and could be improved.”\n3\n\nProvide a star rating from 1-5 of the following review text: “Please don’t get this water bottle, there are major design flaws, for example the cap doesn’t screw on fully so water leaks into my backpack all the time.”\n1\n\nProvide a star rating from 1-5 of the following review text: \\“{{review_text}}\\”\n```\n\nIn this case, `review_text`` is a field of the Firestore document and will be substituted into the prompt when querying.\n\n### Choosing a generative model\n\nWhen installing this extension you will be prompted to pick a Gemini model.\n\nFor Google AI the list of supported models is [here](https://ai.google.dev/models/gemini), and this parameter should be set to the model name, the second segment of the model code (for\nexample `models/gemini-1.0-pro` should be chosen as `gemini-1.0-pro`).\n\nFor Vertex AI, the list of models is [here](https://cloud.google.com/vertex-ai/docs/generative-ai/learn/models).\n\n#### Multimodal Prompts\n\nMany Gemini models, such as **Gemini 1.5 Flash**, support multimodal prompts, allowing both text and image inputs. This feature is not supported by text-only models like `gemini-1.0-pro`.\n\n**Image Field Configuration:**  \nDuring installation, you may specify an **Image Field**. This installation parameter is a string which corresponds to a field in Cloud Firestore documents.\n\nWhen you select these options, any document handled by the extension must contain an image field. The image field must be a string, and can either be the Cloud Storage URL of an object (e.g `gs://my-bucket.appspot.com/filename.png`).\n\n##### Gemini Pro Vision (deprecated)\n\nThis extension has historically supported calls to the (now deprecated) Gemini Pro Vision model on Google AI and Vertex AI APIs.\n\nFor the Gemini Pro Vision models Google AI requires prompts to have both an image and text part, whereas Vertex AI allows gemini-pro-vision to be prompted with text only as well. If you have selected to use the Gemini Pro Vision model (deprecated) and have Google AI as a provider then any document handled by the extension must contain an image field.\n\nThe Gemini Pro Vision API has a limit on image sizes. For Google AI this limit is currently 1MB, and for Vertex AI this limit is 4MB. This extension compress and resize images that fall above this limit.\n\n### Troubleshooting timeout/PROCESSING errors\n\nThis extension will update the state of a document that is being processed within that status field of that document. When using Gemini Pro Vision with large images, there is a possibility that the process of compressing and resizing the image will exceed the extension's cloud function memory. By default this extension deploys a cloud function with 2GiB of memory, which should handle most use cases. If for some reason this is too much memory, you may reconfigure the function in the GCP console.\n\n### Regenerating a response\n\nChanging the state field of a completed document's status from `COMPLETED` to anything else will retrigger the extension for that document.\n\n## Billing\n\nTo install an extension, your project must be on the Blaze (pay as you go) plan. You will be charged a small amount (typically around $0.01/month) for the Firebase resources required by this extension (even if it is not used).\nThis extension uses other Firebase and Google Cloud Platform services, which have associated charges if you exceed the service’s no-cost tier:\n\n- Cloud Firestore\n- Cloud Functions (See [FAQs](https://firebase.google.com/support/faq#extensions-pricing))\n- Associated costs for using Vertex AI ([see their pricing](https://cloud.google.com/vertex-ai/pricing#generative_ai_models)) if you use this provider.\n- Associated costs for using Google AI ([see their pricing](https://ai.google.dev/pricing)) if you use this provider.\n\n[Learn more about Firebase billing.](https://firebase.google.com/pricing)\n","postinstallContent":"## See It In Action\n\nYou can test out this extension right away!\n\n1. Go to your Cloud Firestore dashboard in the Firebase console.\n2. If it doesn't exist, create the collection that you specified during installation: **${param:COLLECTION_NAME}**.\n3. Add a document to this collection. The extension will expect the handlebar variables in your prompt to have values specified as fields in your document. The extension will substitute the values into the prompt before passing the prompt to the generative model.\n4. In a few seconds, you'll see a status field appear in the document. This field will update as the extension processes the message. When processing is finished, the **${param:RESPONSE_FIELD}** field of the document should be populated with the response generated by Google AI.\n\nNote: You can also use the Firebase Admin SDK to add a document:\n\n```javascript\nconst ref = await admin\n    .firestore()\n    .collection(\"${param:COLLECTION_NAME}\")\n    .add({ ... })\n\nref.onSnapshot(snap => {\n    if (snap.get('${param:RESPONSE_FIELD}')) console.log(\n        'RESPONSE:',\n        snap.get('${param:RESPONSE_FIELD}')\n    )\n})\n```\n\n## About the providers\n\nThe extension gives you a choice of what provider to use for the available models:\n\n- Google AI: For more details on this Gemini API, see the [Google AI documentation](https://ai.google.dev/docs).\n\n- Vertex AI: For more details on the Vertex AI Gemini API, see the [Vertex AI documentation](https://cloud.google.com/vertex-ai/docs/generative-ai/model-reference/gemini).\n\n## About the models\n\nFor Google AI the list of supported models is [here](https://ai.google.dev/models/gemini), and this parameter should be set to the model name, the second segment of the model code (for\nexample `models/gemini-1.0-pro` should be chosen as `gemini-1.0-pro`).\n\nFor Vertex AI, the list of models is [here](https://cloud.google.com/vertex-ai/docs/generative-ai/learn/models).\n\n#### Multimodal Prompts\n\nMany of the Gemini models accept multimodal prompts. This extension allows for multimodal prompting with images using such models. Note that this feature is not supported for models such as `gemini-1.0-pro` which do not allow multimodal prompts.\n\nOn installation you may pick an `image` field. The image field must be the Cloud Storage URL of an object (e.g `gs://my-bucket.appspot.com/filename.png`). This image will then be provided as part of the prompt.\n\n##### Gemini Pro Vision (deprecated)\n\nThis extension has historically supported calls to the (now deprecated) Gemini Pro Vision model on Google AI and Vertex AI APIs.\n\nFor the Gemini Pro Vision models Google AI requires prompts to have both an image and text part, whereas Vertex AI allows gemini-pro-vision to be prompted with text only as well. If you have selected to use the Gemini Pro Vision model (deprecated) and have Google AI as a provider then any document handled by the extension must contain an image field.\n\nThe Gemini Pro Vision API has a limit on image sizes. For Google AI this limit is currently 1MB, and for Vertex AI this limit is 4MB. This extension compress and resize images that fall above this limit.\n\n## Handling errors\n\nIf the extension encounters an error, it will write an error message to the document in `status` field. You can use this field to monitor for errors in your documents. Currently some errors will instruct you to visit the Cloud Function logs for the extension, to avoid exposing sensitive information.\n\n## Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n","readmeContent":"# Multimodal Tasks with the Gemini API\n\n**Author**: Google Cloud (**[https://cloud.google.com](https://cloud.google.com)**)\n\n**Description**: Performs multimodel generative tasks on text and images, customizable with prompt engineering, using Gemini models and Firestore.\n\n\n\n**Details**: This extension allows you to perform generative tasks using the Gemini API, a custom prompt, and Firestore.\n\nOn installation, you will be asked to provide the following information:\n\n- **Gemini API Provider** This extension makes use of the Gemini family of models. Currently the extension supports the Google AI Gemini API and the Vertex AI Gemini API. Learn more about the differences between the Google AI and Vertex AI Gemini APIs [here](https://cloud.google.com/vertex-ai/docs/generative-ai/migrate/migrate-google-ai).\n\nNote that Generative AI on Vertex AI is only available in the regions listed [here](https://cloud.google.com/vertex-ai/docs/generative-ai/learn/locations-genai).\n\nA list of languages and regions supported by the Gemini API on Google AI is [here](https://ai.google.dev/available_regions).\n\n**Gemini Model**: Input the name of which Gemini model you would like to use. To view available models for each provider, see:\n\n- [Vertex AI Gemini models](https://cloud.google.com/vertex-ai/docs/generative-ai/learn/models)\n- [Google AI Gemini models](https://ai.google.dev/models/gemini)\n  **Firestore Collection Path**: This extension will listen to the specified collection(s) for new task documents.\n  **Prompt**: This is the text that you want the Gemini API to generate a response for. It can be free-form text or it can use handlebars variables to substitute values from the Firestore document.\n\nThis extension will listen to the specified collection for new documents. When such a document is added, the extension will:\n\n1. Substitute any variables from the document into the prompt.\n2. Query the Gemini API to generate a response based on the prompt.\n3. Write the response from the Model API back to the triggering document in the response field.\n\nAdditionally the extension deploys a callable function, which may be called with data containing the values for handlebar substitution.\n\nNote that the extension only supports top-level handlebars variables, substitution into nested handlebar templates is not supported.\n\nEach instance of the extension should be configured to perform one particular task. If you have multiple tasks, you can install multiple instances.\n\nFor example, you could use this extension to:\n\n- Predict star ratings on a collection of product reviews.\n- Classify customer feedback as positive, negative, or neutral.\n- Summarize long articles.\n- Extract named entities from text.\n- Generate creative text, such as poems or code.\n\nHere’s an example prompt used for predicting star ratings on a collection of product reviews:\n\n```\nProvide a star rating from 1-5 of the following review text: “This is a truly incredible water bottle, I keep it with me all the time when I’m traveling and it has never let me down.”\n5\n\nProvide a star rating from 1-5 of the following review text: “I really enjoyed the water bottle, I just wish they carried this in a larger size as I go for long hikes. But overall the aesthetic, manufacturing, and functional design are great for what I needed.”\n4\n\nProvide a star rating from 1-5 of the following review text: “The water bottle was fine, although the design was a bit lacking and could be improved.”\n3\n\nProvide a star rating from 1-5 of the following review text: “Please don’t get this water bottle, there are major design flaws, for example the cap doesn’t screw on fully so water leaks into my backpack all the time.”\n1\n\nProvide a star rating from 1-5 of the following review text: \\“{{review_text}}\\”\n```\n\nIn this case, `review_text`` is a field of the Firestore document and will be substituted into the prompt when querying.\n\n### Choosing a generative model\n\nWhen installing this extension you will be prompted to pick a Gemini model.\n\nFor Google AI the list of supported models is [here](https://ai.google.dev/models/gemini), and this parameter should be set to the model name, the second segment of the model code (for\nexample `models/gemini-1.0-pro` should be chosen as `gemini-1.0-pro`).\n\nFor Vertex AI, the list of models is [here](https://cloud.google.com/vertex-ai/docs/generative-ai/learn/models).\n\n#### Multimodal Prompts\n\nMany Gemini models, such as **Gemini 1.5 Flash**, support multimodal prompts, allowing both text and image inputs. This feature is not supported by text-only models like `gemini-1.0-pro`.\n\n**Image Field Configuration:**  \nDuring installation, you may specify an **Image Field**. This installation parameter is a string which corresponds to a field in Cloud Firestore documents.\n\nWhen you select these options, any document handled by the extension must contain an image field. The image field must be a string, and can either be the Cloud Storage URL of an object (e.g `gs://my-bucket.appspot.com/filename.png`).\n\n##### Gemini Pro Vision (deprecated)\n\nThis extension has historically supported calls to the (now deprecated) Gemini Pro Vision model on Google AI and Vertex AI APIs.\n\nFor the Gemini Pro Vision models Google AI requires prompts to have both an image and text part, whereas Vertex AI allows gemini-pro-vision to be prompted with text only as well. If you have selected to use the Gemini Pro Vision model (deprecated) and have Google AI as a provider then any document handled by the extension must contain an image field.\n\nThe Gemini Pro Vision API has a limit on image sizes. For Google AI this limit is currently 1MB, and for Vertex AI this limit is 4MB. This extension compress and resize images that fall above this limit.\n\n### Troubleshooting timeout/PROCESSING errors\n\nThis extension will update the state of a document that is being processed within that status field of that document. When using Gemini Pro Vision with large images, there is a possibility that the process of compressing and resizing the image will exceed the extension's cloud function memory. By default this extension deploys a cloud function with 2GiB of memory, which should handle most use cases. If for some reason this is too much memory, you may reconfigure the function in the GCP console.\n\n### Regenerating a response\n\nChanging the state field of a completed document's status from `COMPLETED` to anything else will retrigger the extension for that document.\n\n## Billing\n\nTo install an extension, your project must be on the Blaze (pay as you go) plan. You will be charged a small amount (typically around $0.01/month) for the Firebase resources required by this extension (even if it is not used).\nThis extension uses other Firebase and Google Cloud Platform services, which have associated charges if you exceed the service’s no-cost tier:\n\n- Cloud Firestore\n- Cloud Functions (See [FAQs](https://firebase.google.com/support/faq#extensions-pricing))\n- Associated costs for using Vertex AI ([see their pricing](https://cloud.google.com/vertex-ai/pricing#generative_ai_models)) if you use this provider.\n- Associated costs for using Google AI ([see their pricing](https://ai.google.dev/pricing)) if you use this provider.\n\n[Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\n\n\n\n**Configuration Parameters:**\n\n* Gemini API Provider: This extension makes use of the Gemini family of large language models. Currently the extension supports the Google AI Gemini API (for developers) and the Vertex AI Gemini API. Learn more about the differences between the Google AI and Vertex AI Gemini APIs here.\n\n* Gemini model: Input the name of the Gemini model you would like to use. To view available models for each provider, see: [Vertex AI Gemini models](https://cloud.google.com/vertex-ai/docs/generative-ai/learn/models), [Google AI Gemini models](https://ai.google.dev/models/gemini)\n\n* Google AI API Key: If you have selected Google AI as your provider, then this parameteris required. If you have instead selected Vertex AI, then this parameter is not required, and application default credentials will be used.\n\n* Firestore Collection Path: Used to store conversation history represented as documents. This extension will listen to the specified collection(s) for new message documents.\n\n* Prompt: This is the text that you want the Gemini API to generate a response for. It can be free-form text or it can use handlebars variables to substitute values from the Firestore document. For example if you set this parameter as \"What is the capital of {{ country }}?\"\n\n* Image field (Gemini Vision Models ONLY): A document field containing a cloud storage URL of an image, or a base64 string of an image. Note that this field is only supported by Gemini, and only with the Gemini Pro Vision models. If you are using a text-only model, you should leave this field blank.\n\n* Response Field: The field in the message document into which to put the response.\n\n* Cloud Functions location: Where do you want to deploy the functions created for this extension? For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations). Note that Generative AI on Vertex AI is only available in the regions listed [here](https://cloud.google.com/vertex-ai/docs/generative-ai/learn/locations-genai). A list of languages and regions supported by the Gemini API on Google AI is [here](https://ai.google.dev/available_regions).\n\n* Temperature: Controls the randomness of the output. Values can range over [0,1], inclusive. A value closer to 1 will produce responses that are more varied, while a value closer to 0 will typically result in less surprising responses from the model.\n\n* Nucleus sampling probability: If specified, nucleus sampling will be used as the decoding strategy. Nucleus sampling considers the smallest set of tokens whose probability sum is at least a fixed value. Enter a value between 0 and 1.\n\n* Sampling strategy parameter: If specified, top-k sampling will be used as the decoding strategy. Top-k sampling considers the set of topK most probable tokens.\n\n* Candidate count: When set to an integer higher than one, additional candidate responses, up to the specified number, will be stored in Firestore under the 'candidates' field.\n\n* Candidates field: The field in the message document into which to put the other candidate responses if the candidate count parameter is greater than one.\n\n* Hate Speech Threshold: Threshold for hate speech content. Specify what probability level of hate speech content is blocked by the Gemini provider.\n\n* Dangerous Content Threshold: Threshold for dangerous content. Specify what probability level of dangerous content is blocked by the Gemini provider.\n\n* Harassment Content Threshold: Threshold for harassment content. Specify what probability level of harassment content is blocked by the Gemini provider.\n\n* Sexual Content Threshold: Threshold for sexually explicit content. Specify what probability level of sexual content is blocked by the Gemini provider.\n\n\n\n**Cloud Functions:**\n\n* **generateOnCall:** A callable function to perform generative AI tasks.\n\n* **generateText:** Listens to Firestore data writes to perform generative AI tasks.\n\n\n\n**APIs Used**:\n\n* aiplatform.googleapis.com (Reason: For access to the Vertex AI Gemini API if this provider is chosen.)\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* datastore.user (Reason: Allows this extension to access Cloud Firestore to read and process added messages.)\n\n* storage.objectAdmin (Reason: Allows the extension to read from your Cloud Storage.)\n\n* aiplatform.user (Reason: Allows this extension to access the Gemini family of genai models via Vertex AI if this provider is chosen.)\n","displayName":"Multimodal Tasks with the Gemini API","icon":"icon.png","tags":["ai","generative-ai","text-ai","generative-ai","vertex-ai","generative-models","llm","nlp","google-ai"]},"fetchTime":"2024-11-29T13:32:52.687040Z","lastOperationName":"projects/pub-ext-gcloud/operations/47cfb7c6-efea-4ba7-b6fd-93381b78c599","state":"ACTIVE","iconUri":"https://storage.googleapis.com/firebase-extensions-icons/extension_icons/googlecloud/firestore-multimodal-genai_1.0.1@512.png"},"params":{"HARM_CATEGORY_SEXUALLY_EXPLICIT":"HARM_BLOCK_THRESHOLD_UNSPECIFIED","API_KEY":"projects/142115352134/secrets/firestore-multimodal-genai-API_KEY/versions/1","IMAGE_FIELD":"mediaUrl","HARM_CATEGORY_HATE_SPEECH":"HARM_BLOCK_THRESHOLD_UNSPECIFIED","HARM_CATEGORY_HARASSMENT":"HARM_BLOCK_THRESHOLD_UNSPECIFIED","GENERATIVE_AI_PROVIDER":"google-ai","MODEL":"gemini-1.5-pro","CANDIDATES_FIELD":"candidates","HARM_CATEGORY_DANGEROUS_CONTENT":"HARM_BLOCK_THRESHOLD_UNSPECIFIED","CANDIDATE_COUNT":"1","LOCATION":"us-east1","PROMPT":"Describe this image.","COLLECTION_NAME":"wins","RESPONSE_FIELD":"output"},"populatedPostinstallContent":"## See It In Action\n\nYou can test out this extension right away!\n\n1. Go to your Cloud Firestore dashboard in the Firebase console.\n2. If it doesn't exist, create the collection that you specified during installation: **wins**.\n3. Add a document to this collection. The extension will expect the handlebar variables in your prompt to have values specified as fields in your document. The extension will substitute the values into the prompt before passing the prompt to the generative model.\n4. In a few seconds, you'll see a status field appear in the document. This field will update as the extension processes the message. When processing is finished, the **output** field of the document should be populated with the response generated by Google AI.\n\nNote: You can also use the Firebase Admin SDK to add a document:\n\n```javascript\nconst ref = await admin\n    .firestore()\n    .collection(\"wins\")\n    .add({ ... })\n\nref.onSnapshot(snap => {\n    if (snap.get('output')) console.log(\n        'RESPONSE:',\n        snap.get('output')\n    )\n})\n```\n\n## About the providers\n\nThe extension gives you a choice of what provider to use for the available models:\n\n- Google AI: For more details on this Gemini API, see the [Google AI documentation](https://ai.google.dev/docs).\n\n- Vertex AI: For more details on the Vertex AI Gemini API, see the [Vertex AI documentation](https://cloud.google.com/vertex-ai/docs/generative-ai/model-reference/gemini).\n\n## About the models\n\nFor Google AI the list of supported models is [here](https://ai.google.dev/models/gemini), and this parameter should be set to the model name, the second segment of the model code (for\nexample `models/gemini-1.0-pro` should be chosen as `gemini-1.0-pro`).\n\nFor Vertex AI, the list of models is [here](https://cloud.google.com/vertex-ai/docs/generative-ai/learn/models).\n\n#### Multimodal Prompts\n\nMany of the Gemini models accept multimodal prompts. This extension allows for multimodal prompting with images using such models. Note that this feature is not supported for models such as `gemini-1.0-pro` which do not allow multimodal prompts.\n\nOn installation you may pick an `image` field. The image field must be the Cloud Storage URL of an object (e.g `gs://my-bucket.appspot.com/filename.png`). This image will then be provided as part of the prompt.\n\n##### Gemini Pro Vision (deprecated)\n\nThis extension has historically supported calls to the (now deprecated) Gemini Pro Vision model on Google AI and Vertex AI APIs.\n\nFor the Gemini Pro Vision models Google AI requires prompts to have both an image and text part, whereas Vertex AI allows gemini-pro-vision to be prompted with text only as well. If you have selected to use the Gemini Pro Vision model (deprecated) and have Google AI as a provider then any document handled by the extension must contain an image field.\n\nThe Gemini Pro Vision API has a limit on image sizes. For Google AI this limit is currently 1MB, and for Vertex AI this limit is 4MB. This extension compress and resize images that fall above this limit.\n\n## Handling errors\n\nIf the extension encounters an error, it will write an error message to the document in `status` field. You can use this field to monitor for errors in your documents. Currently some errors will instruct you to visit the Cloud Function logs for the extension, to avoid exposing sensitive information.\n\n## Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n","extensionRef":"googlecloud/firestore-multimodal-genai","extensionVersion":"1.0.1","systemParams":{"firebaseextensions.v1beta.function/minInstances":"0","firebaseextensions.v1beta.function/memory":"256","firebaseextensions.v1beta.function/vpcConnectorEgressSettings":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED"}},"lastOperationName":"projects/selfadvocacywins-acb4f/operations/0893ca15-585f-4dba-a966-9c550a602f4c","serviceAccountEmail":"ext-firestore-multimodal-genai@selfadvocacywins-acb4f.iam.gserviceaccount.com","lastOperationType":"CONFIGURE","etag":"79fc89af48a8781addd8ce6ea7e8d1e20d3ca582d60ab7269f898b43dbe485ba"},{"name":"projects/selfadvocacywins-acb4f/instances/firestore-typesense-search","createTime":"2025-01-14T18:41:39.582648Z","updateTime":"2025-01-15T18:13:13.264931Z","state":"ACTIVE","config":{"name":"projects/selfadvocacywins-acb4f/instances/firestore-typesense-search/configurations/9eb58566-f632-42ef-b6c4-65c68226abfd","createTime":"2025-01-15T18:09:49.007525Z","source":{"name":"projects/firestore-search-extension/sources/b77a5e52-4166-4848-8423-6ed7f1b12e33","packageUri":"https://storage.googleapis.com/firebase-extensions-packages-prod/typesense-firestore-typesense-search-1.5.0-24c0928a-ef2b-49d8-9373-e3d4b164bbad.zip","hash":"e519c12528137bd8ef625b9c5bd72e46ac46b68be83c2775c916d1fe0b5fa4b3","extensionRoot":"/","spec":{"specVersion":"v1beta","name":"firestore-typesense-search","version":"1.5.0","description":"Indexes data from Firestore into Typesense for full-text search","roles":[{"role":"datastore.user","reason":"Required to backfill data from your Firestore collection into Typesense"}],"resources":[{"name":"indexOnWrite","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.write\n  resource: projects/${param:PROJECT_ID}/databases/(default)/documents/${param:FIRESTORE_COLLECTION_PATH}/{documentID}\nlocation: ${LOCATION}\nruntime: nodejs18\nsourceDirectory: functions\ntimeout: 540s\n","description":"A function that indexes data into Typesense when it's triggered by Firestore changes","deletionPolicy":"DELETE"},{"name":"backfill","type":"firebaseextensions.v1beta.function","propertiesYaml":"availableMemoryMb: 2048\neventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.write\n  resource: projects/${param:PROJECT_ID}/databases/(default)/documents/typesense_sync/backfill\nlocation: ${LOCATION}\nmaxInstances: 1\nruntime: nodejs18\nsourceDirectory: functions\ntimeout: 540s\n","description":"A function that backfills data from a Firestore collection into Typesense, triggered when a Firestore document with the path `typesense_sync/backfill` has the contents of `trigger: true`.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Typesense","url":"https://typesense.org"},"license":"Apache-2.0","releaseNotesUrl":"https://github.com/typesense/firestore-typesense-search/releases","sourceUrl":"https://github.com/typesense/firebase-typesense-search-extension/tree/master","params":[{"param":"FIRESTORE_COLLECTION_PATH","label":"Firestore Collection Path","type":"STRING","description":"The Firestore collection that needs to be indexed into Typesense.","required":true,"default":"path/to/firestore_collection","example":"path/to/firestore_collection","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/firestore_collection\".","immutable":true},{"param":"FIRESTORE_COLLECTION_FIELDS","label":"Firestore Collection Fields","type":"STRING","description":"A comma separated list of fields that need to be indexed from each Firestore document. Leave blank to index all fields.","example":"field1,field2,field3"},{"param":"TYPESENSE_HOSTS","label":"Typesense Hosts","type":"STRING","description":"A comma-separated list of Typesense Hosts. For single node clusters, a single hostname is sufficient. For multi-node Highly Available or SDN Clusters, please be sure to mention all hostnames.","required":true,"example":"xyz.a1.typesense.net,xyz-1.a1.typesense.net,xyz-2.a1.typesense.net,xyz-3.a1.typesense.net"},{"param":"TYPESENSE_API_KEY","label":"Typesense API Key","type":"SECRET","description":"An Typesense API key with admin permissions. Click on \"Generate API Key\" in cluster dashboard in Typesense Cloud","required":true},{"param":"TYPESENSE_COLLECTION_NAME","label":"Typesense Collection Name","type":"STRING","description":"Typesense collection name to index data into. This collection needs to exist before this extension is installed. Please create it via the Typesense Cloud dashboard or API.","required":true,"default":"companies"},{"param":"FLATTEN_NESTED_DOCUMENTS","label":"Flatten Nested Documents","type":"SELECT","description":"Should nested documents in Firestore be flattened by this extension before they are indexed in Typesense?  Set to \"Yes\" for Typesense versions 0.23.1 and earlier. Set to \"No\" for Typesense versions 0.24.0 and later.","options":[{"value":"false","label":"No"},{"value":"true","label":"Yes"}],"default":"false"},{"param":"LOCATION","label":"Cloud Functions location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true}],"preinstallContent":"Use this extension to sync data from your Firestore collection to [Typesense](https://typesense.org/), to be able to \ndo full-text fuzzy search on your Firestore data.\n\nThis extension listens to your specified Firestore collection and syncs Firestore documents to Typesense \non creation, updates and deletes. It also provides a function to help you backfill data.\n\n#### Additional setup\n\nBefore installing this extension, make sure that you have:\n\n1. [Set up a Cloud Firestore database](https://firebase.google.com/docs/firestore/quickstart) in your Firebase project.\n2. [Setup](https://typesense.org/docs/0.20.0/guide/install-typesense.html) a Typesense cluster \n  (on [Typesense Cloud](https://cloud.typesense.org) or a Self-Hosted server).\n3. Setup a Typesense Collection either through the Typesense Cloud dashboard or \n  through the [API](https://typesense.org/docs/0.20.0/api/collections.html#create-a-collection).\n\nThis extension will sync changes that happen _after_ you've installed the extension. You'll be able to run a function \nto backfill existing data in your Firestore collection. Detailed information for running this backfill function \nwill be provided after you install this extension.\n\n#### Billing\n\nTo install an extension, your project must be on the [Blaze (pay as you go) plan](https://firebase.google.com/pricing)\n\n- You will be charged a small amount (typically around $0.01/month) for the Firebase resources required by this extension (even if it is not used).\n- This extension uses other Firebase and Google Cloud Platform services, which have associated charges if you exceed the service’s free tier:\n    - Cloud Firestore\n    - Cloud Functions (Node.js 14+ runtime. [See FAQs](https://firebase.google.com/support/faq#expandable-24))\n- Usage of this extension also requires you to have a running Typesense cluster either on Typesense Cloud or some \n  self-hosted server. You are responsible for any associated costs with these services.\n","postinstallContent":"### Post-installation Notes\n\nNow that you've installed the extension, changes from `${param:FIRESTORE_COLLECTION_PATH}`\nin your Firestore Database will be synced to the Typesense Collection `${param:TYPESENSE_COLLECTION_NAME}`\non `${param:TYPESENSE_HOSTS}`.\n\n### Pre-requisites\n\nAs a reminder in case you haven't already done this, make sure that you have setup a Typesense Collection in one of the following ways:\n\n- Through the Typesense Cloud Dashboard or\n- Through the [API](https://typesense.org/docs/0.20.0/api/collections.html#create-a-collection).\n\nThis extension expects a Typesense Cloud collection to already be created and does not create it for you.\n\n### Backfilling Data\n\nThis extension only syncs data that was created or changed after it was installed.\nIn order to backfill data that already exists in your Firestore collection to your Typesense Collection:\n\n1. Create a new Firestore collection called `typesense_sync` through the Firestore UI.\n2. Create a new document with the ID `backfill` and contents of `{trigger: true}`\n\nThis will trigger the backfill background function, which will read data from your Firestore collection and create equivalent documents in your Typesense collection.\n\n### See the Extension in Action\n\nTry adding or updating a Firestore document in `${param:FIRESTORE_COLLECTION_PATH}` through the Firestore UI.\nYou should see the change reflected in your Typesense collection.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n","readmeContent":"# Firestore / Firebase Typesense Search Extension ⚡ 🔍 \n\nA Firebase extension to sync data from your Firestore collection to [Typesense](https://typesense.org/), \nto be able to do full-text fuzzy search on your Firestore data, with typo tolerance, faceting, filtering, sorting, curation, synonyms, geosearch and more.\n\nThis extension listens to your specified Firestore collection and syncs Firestore documents to Typesense \non creation, updates and deletes. It also provides a function to help you backfill data.\n\n**What is Typesense?**\n\nIf you're new to [Typesense](https://typesense.org), it is an open source search engine that is simple to use, run and scale, with clean APIs and documentation. Think of it as an open source alternative to Algolia and an easier-to-use, batteries-included alternative to ElasticSearch. Get a quick overview from [this guide](https://typesense.org/docs/guide).\n\n\n## ⚙️ Usage\n\n### Step 1️⃣ : Setup Prerequisites\n\nBefore installing this extension, make sure that you have:\n\n1. [Set up a Cloud Firestore database](https://firebase.google.com/docs/firestore/quickstart) in your Firebase project.\n\n   If using Google Workspace for Business, ensure that your default cloud compute based service account has the following roles (which can be found in the Google Cloud Console IAM section):\n   \n    * Artifact Registry Administrator\n    * Artifact Registry Create-on-Push Writer\n    * Artifact Registry Service Agent\n    * Logs Writer\n    * Storage Object Viewer\n3. [Set up](https://typesense.org/docs/guide/install-typesense.html) a Typesense cluster on [Typesense Cloud](https://cloud.typesense.org) or [Self-Hosted](https://typesense.org/docs/guide/install-typesense.html#option-2-local-machine-self-hosting) (free).\n4. Set up a Typesense Collection either through the Typesense Cloud dashboard or \n  through the [API](https://typesense.org/docs/latest/api/collections.html#create-a-collection).\n\n> [!IMPORTANT]\n> ☝️ #3 above is a commonly missed step. This extension **does not create the Typesense Collection for you**. Instead it syncs data to a Typesense collection you've already created. If you see an HTTP 404 in the extension logs, it's most likely because of missing this step. \n\n### Step 2️⃣ : Install the Extension \n\nYou can install this extension either through the Firebase Web console or through the Firebase CLI.\n\n##### Firebase Console\n\n[![Install this extension in your Firebase project](https://www.gstatic.com/mobilesdk/210513_mobilesdk/install-extension.png \"Install this extension in your Firebase project\")][install-link]\n\n[install-link]: https://console.firebase.google.com/project/_/extensions/install?ref=typesense/firestore-typesense-search\n\n##### Firebase CLI\n\n```bash\nfirebase ext:install typesense/firestore-typesense-search --project=[your-project-id]\n```\n\nLearn more about installing extensions in the Firebase Extensions documentation: [Console](https://firebase.google.com/docs/extensions/install-extensions?platform=console), [CLI](https://firebase.google.com/docs/extensions/install-extensions?platform=cli).\n\n#### Syncing Multiple Firestore collections\n\n> [!TIP]\n> You can install this extension multiple times in your Firebase project by clicking on the installation link above multiple times, and use a different Firestore collection path in each installation instance. [Here](https://github.com/typesense/firestore-typesense-search/issues/9#issuecomment-885940705) is a screenshot of how this looks.\n\n\n#### 🎛️ Configuration Parameters\n\nWhen you install this extension, you'll be able to configure the following parameters:\n\n| Parameter                   | Description                                                                                                                                                                                                                                                                                    |\n|-----------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Firestore Collection Path   | The Firestore collection that needs to be indexed into Typesense.                                                                                                                                                                                                                              |\n| Firestore Collection Fields | A comma separated list of fields that need to be indexed from each Firestore document. Leave blank to index all fields.                                                                                                                                                                        |\n| Flatten Nested Documents    | Should nested documents in Firestore be flattened before they are indexed in Typesense? Set to \"Yes\" for Typesense Server versions v0.23.1 and below, since indexing Nested objects is natively supported only in Typesense Server v0.24 and above.                                            |\n| Typesense Hosts             | A comma-separated list of Typesense Hosts (only domain without https or port number). For single node clusters, a single hostname is sufficient. For multi-node Highly Available or (Search Delivery Network) SDN Clusters, please be sure to mention all hostnames in a comma-separated list. | \n| Typesense API Key           | A Typesense API key with admin permissions. Click on \"Generate API Key\" in cluster dashboard in Typesense Cloud.                                                                                                                                                                               |\n| Typesense Collection Name   | Typesense collection name to index data into (you need to create this collection in Typesense yourself. This extension does not create the Typesense Collection for you).                                                                                                                      |\n| Cloud Functions location    | Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).                                        |\n\n> ⚠️ You'll notice that there is no way to configure the port number or protocol.\nThis is because this extension only supports connecting to Typesense running HTTPS on Port 443, since your data goes from Firebase to Typesense over the public internet and we want your data to be encrypted in transit.\nFor Typesense Cloud, HTTPS is already configured for you.\n> \n> When self-hosting Typesense, you want to make sure you set `--api-port=443` and also get an SSL certificate from say [LetsEncrypt](https://letsencrypt.org/) or any registrar\nand configure Typesense to use it using the `--ssl-certificate` and `--ssl-certificate-key` [server parameters](https://typesense.org/docs/latest/api/server-configuration.html).\n> Alternatively, if you're running Typesense on your local machine, you can also set up a local HTTPS tunnel using something like [ngrok](https://ngrok.com/) (`ngrok http 8108`) and use the ngrok hostname in the extension. \n\n##### Example\n\nIf you have a Firestore database like this called `users`:\n\n<img src=\"assets/firestore_db_example.png\" alt=\"Firestore DB Example\" width=\"800\"/>\n\nHere's the extension configuration screen with all the options filled out, if you want to sync the `users` Firestore collection to Typesense:\n\n<img src=\"assets/extension_configuration_example.png\" alt=\"Firestore DB Example\" width=\"500\" />\n\n### Step 3️⃣ : [Optional] Backfill existing data\n\nThis extension only syncs data that was created or changed in Firestore, after it was installed. In order to backfill data that already exists in your Firestore collection to your Typesense Collection:\n\n- Create a new Firestore collection called `typesense_sync` through the Firestore UI.\n- Create a new document with the ID `backfill` and contents of `{trigger: true}`\n- [Optional] If you have [multiple instances](#syncing-multiple-firestore-collections) of the extension installed to sync multiple collections, you can specify which particular collections are backfilled by setting the contents of the `backfill` document in the previous step to `{trigger: true, firestore_collections: [\"path/to/firestore_collection_1\", \"path/to/firestore_collection_2\"] }`\n\nThis will trigger the backfill background Cloud function, which will read data from your Firestore collection(s) and create equivalent documents in your Typesense collection.\n\n## ☁️ Cloud Functions\n\n* **indexOnWrite:** A function that indexes data into Typesense when it's triggered by Firestore changes.\n\n* **backfill:** A function that backfills data from a Firestore collection into Typesense, triggered when a Firestore document with the path `typesense_sync/backfill` has the contents of `trigger: true`.\n\n\n## 🔑 Access Required\n\nThis extension will operate with the following project IAM roles:\n\n* datastore.user (Reason: Required to backfill data from your Firestore collection into Typesense)\n\n## 🧾 Billing\n\nTo install an extension, your project must be on the [Blaze (pay as you go) plan](https://firebase.google.com/pricing).\n\n- You will be charged a small amount (typically around $0.01/month) for the Firebase resources required by this extension (even if it is not used).\n- This extension uses other Firebase and Google Cloud Platform services, which have associated charges if you exceed the service’s free tier:\n  - Cloud Firestore\n  - Cloud Functions (Node.js 14+ runtime. [See FAQs](https://firebase.google.com/support/faq#expandable-24))\n- Usage of this extension also requires you to have a running Typesense cluster either on Typesense Cloud or some\n  self-hosted server. You are responsible for any associated costs with these services.\n\n\n## Development Workflow\n\n#### Run Emulator\n\n```shell\nnpm run emulator\nnpm run typesenseServer\n```\n\n- Emulator UI will be accessible at http://localhost:4000.\n- Local Typesense server will be accessible at http://localhost:8108\n\nAdd records in the Firestore UI and they should be created in Typesense.\n\n#### Run Integration Tests\n\n```shell\nnpm run test\n```\n\n#### Generate README\n\nThe Firebase CLI provides the following convenience command to auto-generate a README file containing content\npulled from extension.yaml file and PREINSTALL.md file:\n\n```shell\nfirebase ext:info ./ --markdown > README.md\n```\n\n#### Publish Extension\n\n- Update version number in extension.yaml\n- Add entry to CHANGELOG.md\n- Create release in GitHub\n- \n    ```shell\n    firebase ext:dev:upload typesense/firestore-typesense-search\n    ```\n\n## ℹ️ Support\n\nPlease read through the FAQ below, search through [past GitHub issues](https://github.com/search?q=repo%3Atypesense%2Ffirestore-typesense-search+repo%3Atypesense%2Ftypesense+firebase&type=issues), past threads in our [knowledge base](https://threads.typesense.org) and if you're unable to find an answer, please open a GitHub issue in this repo or join our [Slack community](https://join.slack.com/t/typesense-community/shared_invite/zt-2fetvh0pw-ft5y2YQlq4l_bPhhqpjXig) and ask there.\n\n#### FAQs\n\n- **My Typesenese collection is empty, even after installing the extension. What could be wrong?**\n\n   The extension only syncs changes from your Firestore collection _from the time when it is installed_. To backfill existing data from your Firestore collection into Typesense, you want to run the backfill step described [here](#step-3%EF%B8%8F⃣--optional-backfill-existing-data).\n\n- **My Typesense collection is missing some records. What could be wrong?**\n\n  This almost always is because the collection schema in Typesense does not match the structure of the documents in Firebase, and so Typesense is rejecting the documents due to validation failure.\n  All validation errors returned by Typesense are logged in detail in the Firebase extension logs, which are accessible via the Firebase web console. You want to search the logs for both the backfill function and also the indexing function from this extension.\n\n- **The backfill function is not getting triggered. What could be wrong?**\n\n  The backfill function watches for changes to a document with ID called `backfill`, in a Firestore collection called `typesense_sync`. This document should have a key called `trigger` with a boolean value of `true`. So if you've already created this key, you want to change its value to `false` and then change it back to `true` to re-trigger the backfill function.\n\n- **How do I sync multiple collections?**\n\n  You can install this extension multiple times and set a different Firestore collection path for each instance. Read more [here](#syncing-multiple-firestore-collections)\n\n- **How do I backfill just a single collection, when I've installed the extension multiple times?**\n\n  See the last bullet point under the backfilling instructions [here](#step-3%EF%B8%8F⃣--optional-backfill-existing-data)\n","externalServices":[{"name":"Typesense Cloud","pricingUri":"https://cloud.typesense.org/pricing"},{"name":"Typesense Self Hosted (Free)","pricingUri":"https://typesense.org/downloads"}],"displayName":"Search Firestore with Typesense"},"fetchTime":"2024-10-18T04:34:31.252518Z","lastOperationName":"projects/firestore-search-extension/operations/f9d48896-e899-4279-98f5-11eda1e2d7fd","state":"ACTIVE"},"params":{"LOCATION":"us-central1","FIRESTORE_COLLECTION_PATH":"users","FIRESTORE_COLLECTION_FIELDS":"state, age, winTopics, questionAnswers.selectedWords, questionAnswers.textAnswer, gender, lookingFor, profilePicture, username","TYPESENSE_HOSTS":"e6dqryica24hsu75p-1.a1.typesense.net","TYPESENSE_API_KEY":"projects/142115352134/secrets/firestore-typesense-search-TYPESENSE_API_KEY/versions/1","TYPESENSE_COLLECTION_NAME":"users","FLATTEN_NESTED_DOCUMENTS":"false"},"populatedPostinstallContent":"### Post-installation Notes\n\nNow that you've installed the extension, changes from `users`\nin your Firestore Database will be synced to the Typesense Collection `users`\non `e6dqryica24hsu75p-1.a1.typesense.net`.\n\n### Pre-requisites\n\nAs a reminder in case you haven't already done this, make sure that you have setup a Typesense Collection in one of the following ways:\n\n- Through the Typesense Cloud Dashboard or\n- Through the [API](https://typesense.org/docs/0.20.0/api/collections.html#create-a-collection).\n\nThis extension expects a Typesense Cloud collection to already be created and does not create it for you.\n\n### Backfilling Data\n\nThis extension only syncs data that was created or changed after it was installed.\nIn order to backfill data that already exists in your Firestore collection to your Typesense Collection:\n\n1. Create a new Firestore collection called `typesense_sync` through the Firestore UI.\n2. Create a new document with the ID `backfill` and contents of `{trigger: true}`\n\nThis will trigger the backfill background function, which will read data from your Firestore collection and create equivalent documents in your Typesense collection.\n\n### See the Extension in Action\n\nTry adding or updating a Firestore document in `users` through the Firestore UI.\nYou should see the change reflected in your Typesense collection.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n","extensionRef":"typesense/firestore-typesense-search","extensionVersion":"1.5.0","systemParams":{"firebaseextensions.v1beta.function/vpcConnectorEgressSettings":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","firebaseextensions.v1beta.function/minInstances":"0","firebaseextensions.v1beta.function/memory":"256"}},"lastOperationName":"projects/selfadvocacywins-acb4f/operations/b38c9f01-abfe-4ae2-beab-c29a331c1531","serviceAccountEmail":"ext-firestore-typesense-search@selfadvocacywins-acb4f.iam.gserviceaccount.com","lastOperationType":"CONFIGURE","etag":"6d037972110fd22e71440cf5b45884c9b5260f6300772eae6940d0f39252041b"}]}
[info] i  functions: preparing functions directory for uploading... 
[info] i  functions: packaged /Users/koates/SelfAdvocacyWins/functions (102.99 KB) for uploading 
[debug] [2025-01-15T21:57:41.408Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:41.408Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:41.408Z] >>> [apiv2][query] GET https://cloudfunctions.googleapis.com/v1/projects/selfadvocacywins-acb4f/locations/-/functions [none]
[debug] [2025-01-15T21:57:42.041Z] <<< [apiv2][status] GET https://cloudfunctions.googleapis.com/v1/projects/selfadvocacywins-acb4f/locations/-/functions 200
[debug] [2025-01-15T21:57:42.041Z] <<< [apiv2][body] GET https://cloudfunctions.googleapis.com/v1/projects/selfadvocacywins-acb4f/locations/-/functions {"functions":[{"name":"projects/selfadvocacywins-acb4f/locations/us-central1/functions/ext-firestore-typesense-search-backfill","description":"A function that backfills data from a Firestore collection into Typesense, triggered when a Firestore document with the path `typesense_sync/backfill` has the contents of `trigger: true`.","sourceArchiveUrl":"gs://firebase-mod-sources-prod/36566721f87c75259288245d977a90bcfb41fe699a4a2f4d935bbe501abe3063","eventTrigger":{"eventType":"providers/cloud.firestore/eventTypes/document.write","resource":"projects/selfadvocacywins-acb4f/databases/(default)/documents/typesense_sync/backfill","service":"firestore.googleapis.com","failurePolicy":{}},"status":"ACTIVE","entryPoint":"backfill","timeout":"540s","availableMemoryMb":2048,"serviceAccountEmail":"ext-firestore-typesense-search@selfadvocacywins-acb4f.iam.gserviceaccount.com","updateTime":"2025-01-15T18:12:41.139Z","versionId":"2","labels":{"deployment-tool":"firebase-extensions","goog-firebase-ext-iid":"firestore-typesense-search","firebase-extensions-ar":"enabled","goog-dm":"firebase-ext-firestore-typesense-search","goog-firebase-ext":"firestore-typesense-search"},"environmentVariables":{"DATABASE_INSTANCE":"","DATABASE_URL":"","EXT_INSTANCE_ID":"firestore-typesense-search","FIREBASE_CONFIG":"{\"projectId\":\"selfadvocacywins-acb4f\",\"databaseURL\":\"\",\"storageBucket\":\"selfadvocacywins-acb4f.firebasestorage.app\"}","FIRESTORE_COLLECTION_FIELDS":"state, age, winTopics, questionAnswers.selectedWords, questionAnswers.textAnswer, gender, lookingFor, profilePicture, username","FIRESTORE_COLLECTION_PATH":"users","FLATTEN_NESTED_DOCUMENTS":"false","GCLOUD_PROJECT":"selfadvocacywins-acb4f","LOCATION":"us-central1","PROJECT_ID":"selfadvocacywins-acb4f","STORAGE_BUCKET":"selfadvocacywins-acb4f.firebasestorage.app","TYPESENSE_COLLECTION_NAME":"users","TYPESENSE_HOSTS":"e6dqryica24hsu75p-1.a1.typesense.net"},"runtime":"nodejs18","maxInstances":1,"ingressSettings":"ALLOW_INTERNAL_ONLY","buildId":"7c8f5b1c-6cd7-41f9-bbd7-0359cc24a63a","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"secretEnvironmentVariables":[{"key":"TYPESENSE_API_KEY","projectId":"142115352134","secret":"firestore-typesense-search-TYPESENSE_API_KEY","version":"1"}],"buildName":"projects/142115352134/locations/us-central1/builds/7c8f5b1c-6cd7-41f9-bbd7-0359cc24a63a","dockerRegistry":"ARTIFACT_REGISTRY","automaticUpdatePolicy":{},"buildServiceAccount":"projects/selfadvocacywins-acb4f/serviceAccounts/142115352134-compute@developer.gserviceaccount.com"},{"name":"projects/selfadvocacywins-acb4f/locations/us-central1/functions/ext-firestore-algolia-search-executeFullIndexOperation","description":"Loads all the data from your FireStore database into Algolia","sourceArchiveUrl":"gs://firebase-mod-sources-prod/d6c31a7fd8927200a309842355f2b424db0cbdd4db82bac19514d2358a9726ee","httpsTrigger":{"url":"https://us-central1-selfadvocacywins-acb4f.cloudfunctions.net/ext-firestore-algolia-search-executeFullIndexOperation","securityLevel":"SECURE_OPTIONAL"},"status":"ACTIVE","entryPoint":"executeFullIndexOperation","timeout":"540s","availableMemoryMb":1024,"serviceAccountEmail":"ext-firestore-algolia-search@selfadvocacywins-acb4f.iam.gserviceaccount.com","updateTime":"2025-01-14T18:14:38.692Z","versionId":"2","labels":{"goog-firebase-ext-iid":"firestore-algolia-search","firebase-extensions-ar":"enabled","goog-dm":"firebase-ext-firestore-algolia-search","goog-firebase-ext":"firestore-algolia-search","deployment-tool":"firebase-extensions"},"environmentVariables":{"ALGOLIA_APP_ID":"701AYQP8O7","ALGOLIA_INDEX_NAME":"users_friends","COLLECTION_PATH":"users","DATABASE_ID":"(default)","DATABASE_INSTANCE":"","DATABASE_URL":"","DO_FULL_INDEXING":"true","EXT_INSTANCE_ID":"firestore-algolia-search","FIELDS":"state, age, winTopics, questionAnswers.selectedWords, questionAnswers.textAnswer, gender, lookingFor, profilePicture, username","FIREBASE_CONFIG":"{\"projectId\":\"selfadvocacywins-acb4f\",\"databaseURL\":\"\",\"storageBucket\":\"selfadvocacywins-acb4f.firebasestorage.app\"}","FORCE_DATA_SYNC":"no","GCLOUD_PROJECT":"selfadvocacywins-acb4f","LOCATION":"us-central1","PROJECT_ID":"selfadvocacywins-acb4f","STORAGE_BUCKET":"selfadvocacywins-acb4f.firebasestorage.app"},"runtime":"nodejs18","ingressSettings":"ALLOW_ALL","buildId":"882a74df-8686-4344-8e48-26784a23c0d5","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"secretEnvironmentVariables":[{"key":"ALGOLIA_API_KEY","projectId":"142115352134","secret":"firestore-algolia-search-ALGOLIA_API_KEY","version":"1"}],"buildName":"projects/142115352134/locations/us-central1/builds/882a74df-8686-4344-8e48-26784a23c0d5","dockerRegistry":"ARTIFACT_REGISTRY","automaticUpdatePolicy":{},"buildServiceAccount":"projects/selfadvocacywins-acb4f/serviceAccounts/142115352134-compute@developer.gserviceaccount.com"},{"name":"projects/selfadvocacywins-acb4f/locations/us-central1/functions/ext-firestore-typesense-search-indexOnWrite","description":"A function that indexes data into Typesense when it's triggered by Firestore changes","sourceArchiveUrl":"gs://firebase-mod-sources-prod/36566721f87c75259288245d977a90bcfb41fe699a4a2f4d935bbe501abe3063","eventTrigger":{"eventType":"providers/cloud.firestore/eventTypes/document.write","resource":"projects/selfadvocacywins-acb4f/databases/(default)/documents/users/{documentID}","service":"firestore.googleapis.com","failurePolicy":{}},"status":"ACTIVE","entryPoint":"indexOnWrite","timeout":"540s","availableMemoryMb":256,"serviceAccountEmail":"ext-firestore-typesense-search@selfadvocacywins-acb4f.iam.gserviceaccount.com","updateTime":"2025-01-15T18:12:54.295Z","versionId":"2","labels":{"firebase-extensions-ar":"enabled","goog-dm":"firebase-ext-firestore-typesense-search","goog-firebase-ext":"firestore-typesense-search","deployment-tool":"firebase-extensions","goog-firebase-ext-iid":"firestore-typesense-search"},"environmentVariables":{"DATABASE_INSTANCE":"","DATABASE_URL":"","EXT_INSTANCE_ID":"firestore-typesense-search","FIREBASE_CONFIG":"{\"projectId\":\"selfadvocacywins-acb4f\",\"databaseURL\":\"\",\"storageBucket\":\"selfadvocacywins-acb4f.firebasestorage.app\"}","FIRESTORE_COLLECTION_FIELDS":"state, age, winTopics, questionAnswers.selectedWords, questionAnswers.textAnswer, gender, lookingFor, profilePicture, username","FIRESTORE_COLLECTION_PATH":"users","FLATTEN_NESTED_DOCUMENTS":"false","GCLOUD_PROJECT":"selfadvocacywins-acb4f","LOCATION":"us-central1","PROJECT_ID":"selfadvocacywins-acb4f","STORAGE_BUCKET":"selfadvocacywins-acb4f.firebasestorage.app","TYPESENSE_COLLECTION_NAME":"users","TYPESENSE_HOSTS":"e6dqryica24hsu75p-1.a1.typesense.net"},"runtime":"nodejs18","maxInstances":3000,"ingressSettings":"ALLOW_INTERNAL_ONLY","buildId":"96a4a87f-5574-4f21-9692-73041da1e2f2","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"secretEnvironmentVariables":[{"key":"TYPESENSE_API_KEY","projectId":"142115352134","secret":"firestore-typesense-search-TYPESENSE_API_KEY","version":"1"}],"buildName":"projects/142115352134/locations/us-central1/builds/96a4a87f-5574-4f21-9692-73041da1e2f2","dockerRegistry":"ARTIFACT_REGISTRY","automaticUpdatePolicy":{},"buildServiceAccount":"projects/selfadvocacywins-acb4f/serviceAccounts/142115352134-compute@developer.gserviceaccount.com"},{"name":"projects/selfadvocacywins-acb4f/locations/us-central1/functions/ext-firestore-algolia-search-executeIndexOperation","description":"Firestore document-triggered function that creates, updates, or deletes data in Algolia.","sourceArchiveUrl":"gs://firebase-mod-sources-prod/d6c31a7fd8927200a309842355f2b424db0cbdd4db82bac19514d2358a9726ee","eventTrigger":{"eventType":"providers/cloud.firestore/eventTypes/document.write","resource":"projects/selfadvocacywins-acb4f/databases/(default)/documents/users/{documentID}","service":"firestore.googleapis.com","failurePolicy":{}},"status":"ACTIVE","entryPoint":"executeIndexOperation","timeout":"60s","availableMemoryMb":256,"serviceAccountEmail":"ext-firestore-algolia-search@selfadvocacywins-acb4f.iam.gserviceaccount.com","updateTime":"2025-01-14T18:14:52.662Z","versionId":"2","labels":{"goog-firebase-ext":"firestore-algolia-search","deployment-tool":"firebase-extensions","goog-firebase-ext-iid":"firestore-algolia-search","firebase-extensions-ar":"enabled","goog-dm":"firebase-ext-firestore-algolia-search"},"environmentVariables":{"ALGOLIA_APP_ID":"701AYQP8O7","ALGOLIA_INDEX_NAME":"users_friends","COLLECTION_PATH":"users","DATABASE_ID":"(default)","DATABASE_INSTANCE":"","DATABASE_URL":"","DO_FULL_INDEXING":"true","EXT_INSTANCE_ID":"firestore-algolia-search","FIELDS":"state, age, winTopics, questionAnswers.selectedWords, questionAnswers.textAnswer, gender, lookingFor, profilePicture, username","FIREBASE_CONFIG":"{\"projectId\":\"selfadvocacywins-acb4f\",\"databaseURL\":\"\",\"storageBucket\":\"selfadvocacywins-acb4f.firebasestorage.app\"}","FORCE_DATA_SYNC":"no","GCLOUD_PROJECT":"selfadvocacywins-acb4f","LOCATION":"us-central1","PROJECT_ID":"selfadvocacywins-acb4f","STORAGE_BUCKET":"selfadvocacywins-acb4f.firebasestorage.app"},"runtime":"nodejs18","maxInstances":3000,"ingressSettings":"ALLOW_INTERNAL_ONLY","buildId":"b2610c3b-fa68-4c8e-9db0-d7391c94b172","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"secretEnvironmentVariables":[{"key":"ALGOLIA_API_KEY","projectId":"142115352134","secret":"firestore-algolia-search-ALGOLIA_API_KEY","version":"1"}],"buildName":"projects/142115352134/locations/us-central1/builds/b2610c3b-fa68-4c8e-9db0-d7391c94b172","dockerRegistry":"ARTIFACT_REGISTRY","automaticUpdatePolicy":{},"buildServiceAccount":"projects/selfadvocacywins-acb4f/serviceAccounts/142115352134-compute@developer.gserviceaccount.com"},{"name":"projects/selfadvocacywins-acb4f/locations/us-east1/functions/ext-speech-to-text-transcribeAudio","description":"Listens for new audio files uploaded to a specified Cloud Storage bucket, transcribes the speech in those files, then stores the transcription in storage, or in firestore, or in both.","sourceArchiveUrl":"gs://firebase-mod-sources-prod/a4fcacd72a1cd0ffd63667cfaaf38d169c1d7d3d4bc8fad1571ad356b4873b73","eventTrigger":{"eventType":"google.storage.object.finalize","resource":"projects/_/buckets/selfadvocacywins-acb4f.firebasestorage.app","service":"storage.googleapis.com","failurePolicy":{}},"status":"UNKNOWN","entryPoint":"transcribeAudio","timeout":"60s","availableMemoryMb":1024,"serviceAccountEmail":"ext-speech-to-text@selfadvocacywins-acb4f.iam.gserviceaccount.com","updateTime":"2025-01-08T18:24:06.025699658Z","versionId":"1","labels":{"firebase-extensions-ar":"enabled","goog-firebase-ext":"speech-to-text","goog-firebase-ext-iid":"speech-to-text","deployment-tool":"firebase-extensions"},"environmentVariables":{"COLLECTION_PATH":"transcription","DATABASE_INSTANCE":"","DATABASE_URL":"","ENABLE_AUTOMATIC_PUNCTUATION":"true","EXT_INSTANCE_ID":"speech-to-text","EXTENSION_BUCKET":"selfadvocacywins-acb4f.firebasestorage.app","FIREBASE_CONFIG":"{\"projectId\":\"selfadvocacywins-acb4f\",\"databaseURL\":\"\",\"storageBucket\":\"selfadvocacywins-acb4f.firebasestorage.app\"}","GCLOUD_PROJECT":"selfadvocacywins-acb4f","LANGUAGE_CODE":"en-US","LOCATION":"us-east1","MODEL":"default","OUTPUT_STORAGE_PATH":"wins/{userId}","PROJECT_ID":"selfadvocacywins-acb4f","STORAGE_BUCKET":"selfadvocacywins-acb4f.firebasestorage.app"},"runtime":"nodejs16","maxInstances":3000,"ingressSettings":"ALLOW_INTERNAL_ONLY","buildId":"93524aa6-bf32-4507-be5d-26c1783d38e5","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"buildName":"projects/142115352134/locations/us-east1/builds/93524aa6-bf32-4507-be5d-26c1783d38e5","dockerRegistry":"ARTIFACT_REGISTRY","automaticUpdatePolicy":{},"buildServiceAccount":"projects/selfadvocacywins-acb4f/serviceAccounts/142115352134-compute@developer.gserviceaccount.com"},{"name":"projects/selfadvocacywins-acb4f/locations/us-east1/functions/ext-firestore-multimodal-genai-generateText","description":"Listens to Firestore data writes to perform generative AI tasks.","sourceArchiveUrl":"gs://firebase-mod-sources-prod/b097461cf5dcbffa27e98de53e4d4c73981f5966a562cc1458d63f73c96678ab","eventTrigger":{"eventType":"providers/cloud.firestore/eventTypes/document.write","resource":"projects/selfadvocacywins-acb4f/databases/(default)/documents/wins/{summaryId}","service":"firestore.googleapis.com","failurePolicy":{}},"status":"ACTIVE","entryPoint":"generateText","timeout":"540s","availableMemoryMb":2048,"serviceAccountEmail":"ext-firestore-multimodal-genai@selfadvocacywins-acb4f.iam.gserviceaccount.com","updateTime":"2025-01-05T14:27:46.536Z","versionId":"2","labels":{"firebase-extensions-ar":"enabled","goog-dm":"firebase-ext-firestore-multimodal-genai","goog-firebase-ext":"firestore-multimodal-genai","deployment-tool":"firebase-extensions","goog-firebase-ext-iid":"firestore-multimodal-genai"},"environmentVariables":{"CANDIDATE_COUNT":"1","CANDIDATES_FIELD":"candidates","COLLECTION_NAME":"wins","DATABASE_INSTANCE":"","DATABASE_URL":"","EXT_INSTANCE_ID":"firestore-multimodal-genai","FIREBASE_CONFIG":"{\"projectId\":\"selfadvocacywins-acb4f\",\"databaseURL\":\"\",\"storageBucket\":\"selfadvocacywins-acb4f.firebasestorage.app\"}","GCLOUD_PROJECT":"selfadvocacywins-acb4f","GENERATIVE_AI_PROVIDER":"google-ai","HARM_CATEGORY_DANGEROUS_CONTENT":"HARM_BLOCK_THRESHOLD_UNSPECIFIED","HARM_CATEGORY_HARASSMENT":"HARM_BLOCK_THRESHOLD_UNSPECIFIED","HARM_CATEGORY_HATE_SPEECH":"HARM_BLOCK_THRESHOLD_UNSPECIFIED","HARM_CATEGORY_SEXUALLY_EXPLICIT":"HARM_BLOCK_THRESHOLD_UNSPECIFIED","IMAGE_FIELD":"mediaUrl","LOCATION":"us-east1","MODEL":"gemini-1.5-pro","PROJECT_ID":"selfadvocacywins-acb4f","PROMPT":"Describe this image.","RESPONSE_FIELD":"output","STORAGE_BUCKET":"selfadvocacywins-acb4f.firebasestorage.app"},"runtime":"nodejs18","maxInstances":3000,"ingressSettings":"ALLOW_INTERNAL_ONLY","buildId":"def8146b-4261-40c8-8f12-b179c86dfd42","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"secretEnvironmentVariables":[{"key":"API_KEY","projectId":"142115352134","secret":"firestore-multimodal-genai-API_KEY","version":"1"}],"buildName":"projects/142115352134/locations/us-east1/builds/def8146b-4261-40c8-8f12-b179c86dfd42","dockerRegistry":"ARTIFACT_REGISTRY","automaticUpdatePolicy":{},"buildServiceAccount":"projects/selfadvocacywins-acb4f/serviceAccounts/142115352134-compute@developer.gserviceaccount.com"},{"name":"projects/selfadvocacywins-acb4f/locations/us-east1/functions/ext-firestore-multimodal-genai-generateOnCall","description":"A callable function to perform generative AI tasks.","sourceArchiveUrl":"gs://firebase-mod-sources-prod/b097461cf5dcbffa27e98de53e4d4c73981f5966a562cc1458d63f73c96678ab","httpsTrigger":{"url":"https://us-east1-selfadvocacywins-acb4f.cloudfunctions.net/ext-firestore-multimodal-genai-generateOnCall","securityLevel":"SECURE_OPTIONAL"},"status":"ACTIVE","entryPoint":"generateOnCall","timeout":"60s","availableMemoryMb":256,"serviceAccountEmail":"ext-firestore-multimodal-genai@selfadvocacywins-acb4f.iam.gserviceaccount.com","updateTime":"2025-01-05T14:28:08.156Z","versionId":"2","labels":{"goog-firebase-ext":"firestore-multimodal-genai","deployment-tool":"firebase-extensions","goog-firebase-ext-iid":"firestore-multimodal-genai","firebase-extensions-ar":"enabled","goog-dm":"firebase-ext-firestore-multimodal-genai"},"environmentVariables":{"CANDIDATE_COUNT":"1","CANDIDATES_FIELD":"candidates","COLLECTION_NAME":"wins","DATABASE_INSTANCE":"","DATABASE_URL":"","EXT_INSTANCE_ID":"firestore-multimodal-genai","FIREBASE_CONFIG":"{\"projectId\":\"selfadvocacywins-acb4f\",\"databaseURL\":\"\",\"storageBucket\":\"selfadvocacywins-acb4f.firebasestorage.app\"}","GCLOUD_PROJECT":"selfadvocacywins-acb4f","GENERATIVE_AI_PROVIDER":"google-ai","HARM_CATEGORY_DANGEROUS_CONTENT":"HARM_BLOCK_THRESHOLD_UNSPECIFIED","HARM_CATEGORY_HARASSMENT":"HARM_BLOCK_THRESHOLD_UNSPECIFIED","HARM_CATEGORY_HATE_SPEECH":"HARM_BLOCK_THRESHOLD_UNSPECIFIED","HARM_CATEGORY_SEXUALLY_EXPLICIT":"HARM_BLOCK_THRESHOLD_UNSPECIFIED","IMAGE_FIELD":"mediaUrl","LOCATION":"us-east1","MODEL":"gemini-1.5-pro","PROJECT_ID":"selfadvocacywins-acb4f","PROMPT":"Describe this image.","RESPONSE_FIELD":"output","STORAGE_BUCKET":"selfadvocacywins-acb4f.firebasestorage.app"},"runtime":"nodejs18","ingressSettings":"ALLOW_ALL","buildId":"24d0028a-a938-4d73-8e02-c0d13ef2be47","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"secretEnvironmentVariables":[{"key":"API_KEY","projectId":"142115352134","secret":"firestore-multimodal-genai-API_KEY","version":"1"}],"buildName":"projects/142115352134/locations/us-east1/builds/24d0028a-a938-4d73-8e02-c0d13ef2be47","dockerRegistry":"ARTIFACT_REGISTRY","automaticUpdatePolicy":{},"buildServiceAccount":"projects/selfadvocacywins-acb4f/serviceAccounts/142115352134-compute@developer.gserviceaccount.com"}]}
[debug] [2025-01-15T21:57:42.043Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:42.043Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:42.043Z] >>> [apiv2][query] GET https://cloudfunctions.googleapis.com/v2/projects/selfadvocacywins-acb4f/locations/-/functions filter=environment%3D%22GEN_2%22
[debug] [2025-01-15T21:57:42.511Z] <<< [apiv2][status] GET https://cloudfunctions.googleapis.com/v2/projects/selfadvocacywins-acb4f/locations/-/functions 200
[debug] [2025-01-15T21:57:42.511Z] <<< [apiv2][body] GET https://cloudfunctions.googleapis.com/v2/projects/selfadvocacywins-acb4f/locations/-/functions {"functions":[{"name":"projects/selfadvocacywins-acb4f/locations/us-central1/functions/stripeWebhook","buildConfig":{"build":"projects/142115352134/locations/us-central1/builds/89d70dac-1885-4678-85a8-f982a04fffbb","runtime":"nodejs20","entryPoint":"stripeWebhook","source":{"storageSource":{"bucket":"gcf-v2-sources-142115352134-us-central1","object":"stripeWebhook/function-source.zip","generation":"1736384767139989"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/selfadvocacywins-acb4f/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-142115352134-us-central1","object":"stripeWebhook/function-source.zip","generation":"1736384767139989"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/selfadvocacywins-acb4f/serviceAccounts/142115352134-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"serviceConfig":{"service":"projects/selfadvocacywins-acb4f/locations/us-central1/services/stripewebhook","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"selfadvocacywins-acb4f\",\"storageBucket\":\"selfadvocacywins-acb4f.firebasestorage.app\"}","GCLOUD_PROJECT":"selfadvocacywins-acb4f","EVENTARC_CLOUD_EVENT_SOURCE":"projects/selfadvocacywins-acb4f/locations/us-central1/services/stripeWebhook","FUNCTION_TARGET":"stripeWebhook","LOG_EXECUTION_ID":"true"},"maxInstanceCount":100,"ingressSettings":"ALLOW_ALL","uri":"https://stripewebhook-wbtmyiwspq-uc.a.run.app","serviceAccountEmail":"142115352134-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"stripewebhook-00024-nov","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"ACTIVE","updateTime":"2025-01-09T01:07:22.608659693Z","labels":{"deployment-tool":"cli-firebase","firebase-functions-hash":"d6a16a2c84a8260a285cd49e69297da9f89adbfe"},"environment":"GEN_2","url":"https://us-central1-selfadvocacywins-acb4f.cloudfunctions.net/stripeWebhook","createTime":"2025-01-03T00:34:33.151873341Z"},{"name":"projects/selfadvocacywins-acb4f/locations/us-central1/functions/onUserUpdateTypesense","buildConfig":{"build":"projects/142115352134/locations/us-central1/builds/a8f345b7-77d5-4013-b21e-d2b7e40daac7","runtime":"nodejs20","entryPoint":"onUserUpdateTypesense","source":{"storageSource":{"bucket":"gcf-v2-sources-142115352134-us-central1","object":"onUserUpdateTypesense/function-source.zip","generation":"1736965063564973"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/selfadvocacywins-acb4f/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-142115352134-us-central1","object":"onUserUpdateTypesense/function-source.zip","generation":"1736965063564973"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/selfadvocacywins-acb4f/serviceAccounts/142115352134-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"serviceConfig":{"service":"projects/selfadvocacywins-acb4f/locations/us-central1/services/onuserupdatetypesense","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"selfadvocacywins-acb4f\",\"storageBucket\":\"selfadvocacywins-acb4f.firebasestorage.app\"}","GCLOUD_PROJECT":"selfadvocacywins-acb4f","EVENTARC_CLOUD_EVENT_SOURCE":"projects/selfadvocacywins-acb4f/locations/us-central1/services/onUserUpdateTypesense","FUNCTION_SIGNATURE_TYPE":"cloudevent","FUNCTION_TARGET":"onUserUpdateTypesense","LOG_EXECUTION_ID":"true"},"maxInstanceCount":100,"ingressSettings":"ALLOW_ALL","uri":"https://onuserupdatetypesense-wbtmyiwspq-uc.a.run.app","serviceAccountEmail":"142115352134-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"onuserupdatetypesense-00001-cad","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"eventTrigger":{"trigger":"projects/selfadvocacywins-acb4f/locations/nam5/triggers/onuserupdatetypesense-510610","triggerRegion":"nam5","eventType":"google.cloud.firestore.document.v1.written","eventFilters":[{"attribute":"document","value":"users/{userId}","operator":"match-path-pattern"},{"attribute":"database","value":"(default)"},{"attribute":"namespace","value":"(default)"}],"pubsubTopic":"projects/selfadvocacywins-acb4f/topics/eventarc-nam5-onuserupdatetypesense-510610-271","serviceAccountEmail":"142115352134-compute@developer.gserviceaccount.com","retryPolicy":"RETRY_POLICY_DO_NOT_RETRY"},"state":"ACTIVE","updateTime":"2025-01-15T18:19:43.735561769Z","labels":{"firebase-functions-hash":"2768bcc0832b2bc077abef422579d3e78c19cc74","deployment-tool":"cli-firebase"},"environment":"GEN_2","url":"https://us-central1-selfadvocacywins-acb4f.cloudfunctions.net/onUserUpdateTypesense","createTime":"2025-01-15T18:17:44.337197305Z"},{"name":"projects/selfadvocacywins-acb4f/locations/us-central1/functions/indexUserToAlgolia","buildConfig":{"build":"projects/142115352134/locations/us-central1/builds/28759236-150f-4f6e-807b-0a2f4c86fb55","runtime":"nodejs20","entryPoint":"indexUserToAlgolia","source":{"storageSource":{"bucket":"gcf-v2-sources-142115352134-us-central1","object":"indexUserToAlgolia/function-source.zip","generation":"1736884196215538"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/selfadvocacywins-acb4f/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-142115352134-us-central1","object":"indexUserToAlgolia/function-source.zip","generation":"1736884196215538"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/selfadvocacywins-acb4f/serviceAccounts/142115352134-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"state":"FAILED","updateTime":"2025-01-14T19:51:49.417863761Z","labels":{"deployment-tool":"cli-firebase","firebase-functions-hash":"ebfa4ed68e634d56e0b793436bf6604b58f5f9e7"},"stateMessages":[{"severity":"ERROR","type":"CloudRunServiceNotFound","message":"Cloud Run service projects/selfadvocacywins-acb4f/locations/us-central1/services/indexusertoalgolia for the function was not found. The function will not work correctly. Please redeploy."}],"environment":"GEN_2","url":"https://us-central1-selfadvocacywins-acb4f.cloudfunctions.net/indexUserToAlgolia","createTime":"2025-01-14T19:49:56.424652339Z"},{"name":"projects/selfadvocacywins-acb4f/locations/us-central1/functions/migrateUsersToTypesense","buildConfig":{"build":"projects/142115352134/locations/us-central1/builds/f42b6733-147a-42e3-b771-c33003f5943b","runtime":"nodejs20","entryPoint":"migrateUsersToTypesense","source":{"storageSource":{"bucket":"gcf-v2-sources-142115352134-us-central1","object":"migrateUsersToTypesense/function-source.zip","generation":"1736977754025414"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/selfadvocacywins-acb4f/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-142115352134-us-central1","object":"migrateUsersToTypesense/function-source.zip","generation":"1736977754025414"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/selfadvocacywins-acb4f/serviceAccounts/142115352134-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"serviceConfig":{"service":"projects/selfadvocacywins-acb4f/locations/us-central1/services/migrateuserstotypesense","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"selfadvocacywins-acb4f\",\"storageBucket\":\"selfadvocacywins-acb4f.firebasestorage.app\"}","GCLOUD_PROJECT":"selfadvocacywins-acb4f","EVENTARC_CLOUD_EVENT_SOURCE":"projects/selfadvocacywins-acb4f/locations/us-central1/services/migrateUsersToTypesense","FUNCTION_TARGET":"migrateUsersToTypesense","LOG_EXECUTION_ID":"true"},"maxInstanceCount":100,"ingressSettings":"ALLOW_ALL","uri":"https://migrateuserstotypesense-wbtmyiwspq-uc.a.run.app","serviceAccountEmail":"142115352134-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"migrateuserstotypesense-00006-hek","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"ACTIVE","updateTime":"2025-01-15T21:50:53.500841495Z","labels":{"deployment-tool":"cli-firebase","firebase-functions-hash":"032d013145d93d5dfc9ca7a4eb026ff9b20fe542"},"environment":"GEN_2","url":"https://us-central1-selfadvocacywins-acb4f.cloudfunctions.net/migrateUsersToTypesense","createTime":"2025-01-15T20:43:44.240059581Z"},{"name":"projects/selfadvocacywins-acb4f/locations/us-central1/functions/reindexAlgolia","buildConfig":{"build":"projects/142115352134/locations/us-central1/builds/dbd23b02-370c-496c-850c-dba2d9b82ff7","runtime":"nodejs20","entryPoint":"reindexAlgolia","source":{"storageSource":{"bucket":"gcf-v2-sources-142115352134-us-central1","object":"reindexAlgolia/function-source.zip","generation":"1736870455754978"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/selfadvocacywins-acb4f/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-142115352134-us-central1","object":"reindexAlgolia/function-source.zip","generation":"1736870455754978"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/selfadvocacywins-acb4f/serviceAccounts/142115352134-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"serviceConfig":{"service":"projects/selfadvocacywins-acb4f/locations/us-central1/services/reindexalgolia","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"selfadvocacywins-acb4f\",\"storageBucket\":\"selfadvocacywins-acb4f.firebasestorage.app\"}","GCLOUD_PROJECT":"selfadvocacywins-acb4f","EVENTARC_CLOUD_EVENT_SOURCE":"projects/selfadvocacywins-acb4f/locations/us-central1/services/reindexAlgolia","FUNCTION_TARGET":"reindexAlgolia","LOG_EXECUTION_ID":"true"},"maxInstanceCount":100,"ingressSettings":"ALLOW_ALL","uri":"https://reindexalgolia-wbtmyiwspq-uc.a.run.app","serviceAccountEmail":"142115352134-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"reindexalgolia-00003-jim","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"ACTIVE","updateTime":"2025-01-14T16:02:20.777491883Z","labels":{"firebase-functions-hash":"0d67d30f87bdf61fde54d56489a203370c971c8a","deployment-tool":"cli-firebase"},"environment":"GEN_2","url":"https://us-central1-selfadvocacywins-acb4f.cloudfunctions.net/reindexAlgolia","createTime":"2025-01-14T00:35:14.126442132Z"}]}
[debug] [2025-01-15T21:57:42.514Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:42.514Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:42.514Z] >>> [apiv2][query] GET https://firestore.googleapis.com/v1/projects/selfadvocacywins-acb4f/databases/(default) [none]
[debug] [2025-01-15T21:57:42.827Z] <<< [apiv2][status] GET https://firestore.googleapis.com/v1/projects/selfadvocacywins-acb4f/databases/(default) 200
[debug] [2025-01-15T21:57:42.827Z] <<< [apiv2][body] GET https://firestore.googleapis.com/v1/projects/selfadvocacywins-acb4f/databases/(default) {"name":"projects/selfadvocacywins-acb4f/databases/(default)","uid":"5085eb4a-28e0-4c1d-9790-e2a39615d47b","createTime":"2024-12-25T16:30:15.941441Z","updateTime":"2024-12-25T16:30:15.941441Z","locationId":"nam5","type":"FIRESTORE_NATIVE","concurrencyMode":"PESSIMISTIC","versionRetentionPeriod":"3600s","earliestVersionTime":"2025-01-15T20:57:42.824249Z","appEngineIntegrationMode":"DISABLED","keyPrefix":"s","pointInTimeRecoveryEnablement":"POINT_IN_TIME_RECOVERY_DISABLED","deleteProtectionState":"DELETE_PROTECTION_DISABLED","etag":"IJ2F2qLc+IoDMPHVgfbAw4oD"}
[info] i  functions: ensuring required API run.googleapis.com is enabled... 
[debug] [2025-01-15T21:57:42.829Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:42.829Z] Checked if tokens are valid: true, expires at: 1736980325999
[info] i  functions: ensuring required API eventarc.googleapis.com is enabled... 
[debug] [2025-01-15T21:57:42.830Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:42.830Z] Checked if tokens are valid: true, expires at: 1736980325999
[info] i  functions: ensuring required API pubsub.googleapis.com is enabled... 
[debug] [2025-01-15T21:57:42.830Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:42.830Z] Checked if tokens are valid: true, expires at: 1736980325999
[info] i  functions: ensuring required API storage.googleapis.com is enabled... 
[debug] [2025-01-15T21:57:42.830Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:42.830Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:42.830Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/run.googleapis.com [none]
[debug] [2025-01-15T21:57:42.830Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/run.googleapis.com x-goog-quota-user=projects/selfadvocacywins-acb4f
[debug] [2025-01-15T21:57:42.831Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/eventarc.googleapis.com [none]
[debug] [2025-01-15T21:57:42.831Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/eventarc.googleapis.com x-goog-quota-user=projects/selfadvocacywins-acb4f
[debug] [2025-01-15T21:57:42.833Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/pubsub.googleapis.com [none]
[debug] [2025-01-15T21:57:42.834Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/pubsub.googleapis.com x-goog-quota-user=projects/selfadvocacywins-acb4f
[debug] [2025-01-15T21:57:42.835Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/storage.googleapis.com [none]
[debug] [2025-01-15T21:57:42.835Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/storage.googleapis.com x-goog-quota-user=projects/selfadvocacywins-acb4f
[debug] [2025-01-15T21:57:43.094Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/run.googleapis.com 200
[debug] [2025-01-15T21:57:43.094Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/run.googleapis.com [omitted]
[info] ✔  functions: required API run.googleapis.com is enabled 
[debug] [2025-01-15T21:57:43.214Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/pubsub.googleapis.com 200
[debug] [2025-01-15T21:57:43.214Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/pubsub.googleapis.com [omitted]
[info] ✔  functions: required API pubsub.googleapis.com is enabled 
[debug] [2025-01-15T21:57:43.225Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/eventarc.googleapis.com 200
[debug] [2025-01-15T21:57:43.225Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/eventarc.googleapis.com [omitted]
[info] ✔  functions: required API eventarc.googleapis.com is enabled 
[debug] [2025-01-15T21:57:43.267Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/storage.googleapis.com 200
[debug] [2025-01-15T21:57:43.267Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/selfadvocacywins-acb4f/services/storage.googleapis.com [omitted]
[info] ✔  functions: required API storage.googleapis.com is enabled 
[info] i  functions: generating the service identity for pubsub.googleapis.com... 
[debug] [2025-01-15T21:57:43.267Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:43.268Z] Checked if tokens are valid: true, expires at: 1736980325999
[info] i  functions: generating the service identity for eventarc.googleapis.com... 
[debug] [2025-01-15T21:57:43.268Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:43.268Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:43.268Z] >>> [apiv2][query] POST https://serviceusage.googleapis.com/v1beta1/projects/142115352134/services/pubsub.googleapis.com:generateServiceIdentity [none]
[debug] [2025-01-15T21:57:43.268Z] >>> [apiv2][query] POST https://serviceusage.googleapis.com/v1beta1/projects/142115352134/services/eventarc.googleapis.com:generateServiceIdentity [none]
[debug] [2025-01-15T21:57:43.583Z] <<< [apiv2][status] POST https://serviceusage.googleapis.com/v1beta1/projects/142115352134/services/pubsub.googleapis.com:generateServiceIdentity 200
[debug] [2025-01-15T21:57:43.584Z] <<< [apiv2][body] POST https://serviceusage.googleapis.com/v1beta1/projects/142115352134/services/pubsub.googleapis.com:generateServiceIdentity {"name":"operations/finished.DONE_OPERATION","done":true,"response":{"@type":"type.googleapis.com/google.api.serviceusage.v1beta1.ServiceIdentity","email":"service-142115352134@gcp-sa-pubsub.iam.gserviceaccount.com","uniqueId":"118401120144433723435"}}
[debug] [2025-01-15T21:57:43.597Z] <<< [apiv2][status] POST https://serviceusage.googleapis.com/v1beta1/projects/142115352134/services/eventarc.googleapis.com:generateServiceIdentity 200
[debug] [2025-01-15T21:57:43.597Z] <<< [apiv2][body] POST https://serviceusage.googleapis.com/v1beta1/projects/142115352134/services/eventarc.googleapis.com:generateServiceIdentity {"name":"operations/finished.DONE_OPERATION","done":true,"response":{"@type":"type.googleapis.com/google.api.serviceusage.v1beta1.ServiceIdentity","email":"service-142115352134@gcp-sa-eventarc.iam.gserviceaccount.com","uniqueId":"104722864353882081188"}}
[debug] [2025-01-15T21:57:43.600Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:43.600Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:43.600Z] >>> [apiv2][query] GET https://cloudresourcemanager.googleapis.com/v1/projects/selfadvocacywins-acb4f [none]
[debug] [2025-01-15T21:57:43.701Z] <<< [apiv2][status] GET https://cloudresourcemanager.googleapis.com/v1/projects/selfadvocacywins-acb4f 200
[debug] [2025-01-15T21:57:43.702Z] <<< [apiv2][body] GET https://cloudresourcemanager.googleapis.com/v1/projects/selfadvocacywins-acb4f {"projectNumber":"142115352134","projectId":"selfadvocacywins-acb4f","lifecycleState":"ACTIVE","name":"SelfAdvocacyWins","labels":{"firebase":"enabled","firebase-core":"disabled"},"createTime":"2024-12-25T16:22:28.257166Z"}
[debug] [2025-01-15T21:57:43.704Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:43.704Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:43.704Z] >>> [apiv2][query] GET https://cloudbilling.googleapis.com/v1/projects/selfadvocacywins-acb4f/billingInfo [none]
[debug] [2025-01-15T21:57:43.976Z] <<< [apiv2][status] GET https://cloudbilling.googleapis.com/v1/projects/selfadvocacywins-acb4f/billingInfo 200
[debug] [2025-01-15T21:57:43.976Z] <<< [apiv2][body] GET https://cloudbilling.googleapis.com/v1/projects/selfadvocacywins-acb4f/billingInfo {"name":"projects/selfadvocacywins-acb4f/billingInfo","projectId":"selfadvocacywins-acb4f","billingAccountName":"billingAccounts/016002-B78500-682200","billingEnabled":true}
[debug] [2025-01-15T21:57:43.978Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:43.978Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:43.979Z] >>> [apiv2][query] POST https://cloudfunctions.googleapis.com/v2/projects/selfadvocacywins-acb4f/locations/us-central1/functions:generateUploadUrl [none]
[debug] [2025-01-15T21:57:44.303Z] <<< [apiv2][status] POST https://cloudfunctions.googleapis.com/v2/projects/selfadvocacywins-acb4f/locations/us-central1/functions:generateUploadUrl 200
[debug] [2025-01-15T21:57:44.303Z] <<< [apiv2][body] POST https://cloudfunctions.googleapis.com/v2/projects/selfadvocacywins-acb4f/locations/us-central1/functions:generateUploadUrl {"uploadUrl":"https://storage.googleapis.com/gcf-v2-uploads-142115352134.us-central1.cloudfunctions.appspot.com/561fbb6a-dc44-4f8e-bdee-f726eed45dcb.zip?GoogleAccessId=service-142115352134@gcf-admin-robot.iam.gserviceaccount.com&Expires=1736980064&Signature=S5VIf%2BEifEoaGf%2FVORtry9H1o07sgRb3nAE%2BMY%2FJhXsrVZ1RobH%2FQFF5YalT3lXzW6PSHCa94maBgQ4Wldwyz4fP2HzmYfskY9s0SiaVsGLB%2BEJI327b9yMwMwRv7bw59sqQuc3odQ60oPunRfdzp1zUFwcz%2BQklJgFNymJqyzOo8oJ25%2FreomwdT0R6fkpQYotiVBJRZNFiai04U0pGrWByuyGlWIgoG8pGoRbCxnPyT5HPEfRsOFdy6H2NfMGG17vr9YXdjKSa3LVTPOmW3SyoZbvuWE4Oct8E6ZE41MT8%2FPDsRm6qgmgsWUTKgBAkAJfHepq8XldRk704UMD%2BDA%3D%3D","storageSource":{"bucket":"gcf-v2-uploads-142115352134.us-central1.cloudfunctions.appspot.com","object":"561fbb6a-dc44-4f8e-bdee-f726eed45dcb.zip"}}
[debug] [2025-01-15T21:57:44.305Z] >>> [apiv2][query] PUT https://storage.googleapis.com/gcf-v2-uploads-142115352134.us-central1.cloudfunctions.appspot.com/561fbb6a-dc44-4f8e-bdee-f726eed45dcb.zip GoogleAccessId=service-142115352134%40gcf-admin-robot.iam.gserviceaccount.com&Expires=1736980064&Signature=S5VIf%2BEifEoaGf%2FVORtry9H1o07sgRb3nAE%2BMY%2FJhXsrVZ1RobH%2FQFF5YalT3lXzW6PSHCa94maBgQ4Wldwyz4fP2HzmYfskY9s0SiaVsGLB%2BEJI327b9yMwMwRv7bw59sqQuc3odQ60oPunRfdzp1zUFwcz%2BQklJgFNymJqyzOo8oJ25%2FreomwdT0R6fkpQYotiVBJRZNFiai04U0pGrWByuyGlWIgoG8pGoRbCxnPyT5HPEfRsOFdy6H2NfMGG17vr9YXdjKSa3LVTPOmW3SyoZbvuWE4Oct8E6ZE41MT8%2FPDsRm6qgmgsWUTKgBAkAJfHepq8XldRk704UMD%2BDA%3D%3D
[debug] [2025-01-15T21:57:44.305Z] >>> [apiv2][body] PUT https://storage.googleapis.com/gcf-v2-uploads-142115352134.us-central1.cloudfunctions.appspot.com/561fbb6a-dc44-4f8e-bdee-f726eed45dcb.zip [stream]
[debug] [2025-01-15T21:57:44.598Z] <<< [apiv2][status] PUT https://storage.googleapis.com/gcf-v2-uploads-142115352134.us-central1.cloudfunctions.appspot.com/561fbb6a-dc44-4f8e-bdee-f726eed45dcb.zip 200
[debug] [2025-01-15T21:57:44.599Z] <<< [apiv2][body] PUT https://storage.googleapis.com/gcf-v2-uploads-142115352134.us-central1.cloudfunctions.appspot.com/561fbb6a-dc44-4f8e-bdee-f726eed45dcb.zip [omitted]
[info] ✔  functions: functions folder uploaded successfully 
[info] i  functions: updating Node.js 20 (2nd Gen) function migrateUsersToTypesense(us-central1)... 
[debug] [2025-01-15T21:57:44.607Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:44.607Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:44.607Z] >>> [apiv2][query] PATCH https://cloudfunctions.googleapis.com/v2/projects/selfadvocacywins-acb4f/locations/us-central1/functions/migrateUsersToTypesense updateMask=name%2CbuildConfig.runtime%2CbuildConfig.entryPoint%2CbuildConfig.source.storageSource.bucket%2CbuildConfig.source.storageSource.object%2CbuildConfig.environmentVariables%2CbuildConfig.sourceToken%2CserviceConfig.environmentVariables%2CserviceConfig.ingressSettings%2CserviceConfig.timeoutSeconds%2CserviceConfig.serviceAccountEmail%2CserviceConfig.availableMemory%2CserviceConfig.minInstanceCount%2CserviceConfig.maxInstanceCount%2CserviceConfig.maxInstanceRequestConcurrency%2CserviceConfig.availableCpu%2CserviceConfig.vpcConnector%2CserviceConfig.vpcConnectorEgressSettings%2Clabels%2CbuildConfig.buildEnvironmentVariables
[debug] [2025-01-15T21:57:44.607Z] >>> [apiv2][body] PATCH https://cloudfunctions.googleapis.com/v2/projects/selfadvocacywins-acb4f/locations/us-central1/functions/migrateUsersToTypesense {"name":"projects/selfadvocacywins-acb4f/locations/us-central1/functions/migrateUsersToTypesense","buildConfig":{"runtime":"nodejs20","entryPoint":"migrateUsersToTypesense","source":{"storageSource":{"bucket":"gcf-v2-uploads-142115352134.us-central1.cloudfunctions.appspot.com","object":"561fbb6a-dc44-4f8e-bdee-f726eed45dcb.zip"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""}},"serviceConfig":{"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"selfadvocacywins-acb4f\",\"storageBucket\":\"selfadvocacywins-acb4f.firebasestorage.app\"}","GCLOUD_PROJECT":"selfadvocacywins-acb4f","EVENTARC_CLOUD_EVENT_SOURCE":"projects/selfadvocacywins-acb4f/locations/us-central1/services/migrateUsersToTypesense","FUNCTION_TARGET":"migrateUsersToTypesense","LOG_EXECUTION_ID":"true"},"ingressSettings":null,"timeoutSeconds":null,"serviceAccountEmail":null,"availableMemory":"256Mi","minInstanceCount":null,"maxInstanceCount":null,"maxInstanceRequestConcurrency":80,"availableCpu":"1","vpcConnector":null,"vpcConnectorEgressSettings":null},"labels":{"deployment-tool":"cli-firebase","firebase-functions-hash":"f4e7e061e2d354bdd8f9cbd69ee779058b1e61a2"}}
[debug] [2025-01-15T21:57:45.980Z] <<< [apiv2][status] PATCH https://cloudfunctions.googleapis.com/v2/projects/selfadvocacywins-acb4f/locations/us-central1/functions/migrateUsersToTypesense 200
[debug] [2025-01-15T21:57:45.980Z] <<< [apiv2][body] PATCH https://cloudfunctions.googleapis.com/v2/projects/selfadvocacywins-acb4f/locations/us-central1/functions/migrateUsersToTypesense {"name":"projects/selfadvocacywins-acb4f/locations/us-central1/operations/operation-1736978264828-62bc5c4752c35-c1a28314-580be0c1","metadata":{"@type":"type.googleapis.com/google.cloud.functions.v2.OperationMetadata","createTime":"2025-01-15T21:57:45.936395664Z","target":"projects/selfadvocacywins-acb4f/locations/us-central1/functions/migrateUsersToTypesense","verb":"update","cancelRequested":false,"apiVersion":"v2"},"done":false}
[debug] [2025-01-15T21:57:45.981Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:45.981Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:45.981Z] >>> [apiv2][query] GET https://cloudfunctions.googleapis.com/v2/projects/selfadvocacywins-acb4f/locations/us-central1/operations/operation-1736978264828-62bc5c4752c35-c1a28314-580be0c1 [none]
[debug] [2025-01-15T21:57:46.226Z] <<< [apiv2][status] GET https://cloudfunctions.googleapis.com/v2/projects/selfadvocacywins-acb4f/locations/us-central1/operations/operation-1736978264828-62bc5c4752c35-c1a28314-580be0c1 200
[debug] [2025-01-15T21:57:46.227Z] <<< [apiv2][body] GET https://cloudfunctions.googleapis.com/v2/projects/selfadvocacywins-acb4f/locations/us-central1/operations/operation-1736978264828-62bc5c4752c35-c1a28314-580be0c1 {"name":"projects/selfadvocacywins-acb4f/locations/us-central1/operations/operation-1736978264828-62bc5c4752c35-c1a28314-580be0c1","metadata":{"@type":"type.googleapis.com/google.cloud.functions.v2.OperationMetadata","createTime":"2025-01-15T21:57:45.936395664Z","target":"projects/selfadvocacywins-acb4f/locations/us-central1/functions/migrateUsersToTypesense","verb":"update","cancelRequested":false,"apiVersion":"v2","requestResource":{"@type":"type.googleapis.com/google.cloud.functions.v2.Function","name":"projects/selfadvocacywins-acb4f/locations/us-central1/functions/migrateUsersToTypesense","buildConfig":{"runtime":"nodejs20","entryPoint":"migrateUsersToTypesense","source":{"storageSource":{"bucket":"gcf-v2-sources-142115352134-us-central1","object":"migrateUsersToTypesense/function-source.zip","generation":"1736978265890200"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/selfadvocacywins-acb4f/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-142115352134-us-central1","object":"migrateUsersToTypesense/function-source.zip","generation":"1736977754025414"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/selfadvocacywins-acb4f/serviceAccounts/142115352134-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"serviceConfig":{"service":"projects/selfadvocacywins-acb4f/locations/us-central1/services/migrateuserstotypesense","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"selfadvocacywins-acb4f\",\"storageBucket\":\"selfadvocacywins-acb4f.firebasestorage.app\"}","GCLOUD_PROJECT":"selfadvocacywins-acb4f","EVENTARC_CLOUD_EVENT_SOURCE":"projects/selfadvocacywins-acb4f/locations/us-central1/services/migrateUsersToTypesense","FUNCTION_TARGET":"migrateUsersToTypesense","LOG_EXECUTION_ID":"true"},"ingressSettings":"ALLOW_ALL","uri":"https://migrateuserstotypesense-wbtmyiwspq-uc.a.run.app","serviceAccountEmail":"142115352134-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"migrateuserstotypesense-00006-hek","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"ACTIVE","labels":{"deployment-tool":"cli-firebase","firebase-functions-hash":"f4e7e061e2d354bdd8f9cbd69ee779058b1e61a2"},"environment":"GEN_2","url":"https://us-central1-selfadvocacywins-acb4f.cloudfunctions.net/migrateUsersToTypesense"},"stages":[{"name":"BUILD","state":"NOT_STARTED"},{"name":"SERVICE","state":"NOT_STARTED"}],"operationType":"UPDATE_FUNCTION"},"done":false}
[debug] [2025-01-15T21:57:46.728Z] [update-default-us-central1-migrateUsersToTypesense] Retrying task index 0
[debug] [2025-01-15T21:57:46.729Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:46.729Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:46.729Z] >>> [apiv2][query] GET https://cloudfunctions.googleapis.com/v2/projects/selfadvocacywins-acb4f/locations/us-central1/operations/operation-1736978264828-62bc5c4752c35-c1a28314-580be0c1 [none]
[debug] [2025-01-15T21:57:46.960Z] <<< [apiv2][status] GET https://cloudfunctions.googleapis.com/v2/projects/selfadvocacywins-acb4f/locations/us-central1/operations/operation-1736978264828-62bc5c4752c35-c1a28314-580be0c1 200
[debug] [2025-01-15T21:57:46.961Z] <<< [apiv2][body] GET https://cloudfunctions.googleapis.com/v2/projects/selfadvocacywins-acb4f/locations/us-central1/operations/operation-1736978264828-62bc5c4752c35-c1a28314-580be0c1 {"name":"projects/selfadvocacywins-acb4f/locations/us-central1/operations/operation-1736978264828-62bc5c4752c35-c1a28314-580be0c1","metadata":{"@type":"type.googleapis.com/google.cloud.functions.v2.OperationMetadata","createTime":"2025-01-15T21:57:45.936395664Z","target":"projects/selfadvocacywins-acb4f/locations/us-central1/functions/migrateUsersToTypesense","verb":"update","cancelRequested":false,"apiVersion":"v2","requestResource":{"@type":"type.googleapis.com/google.cloud.functions.v2.Function","name":"projects/selfadvocacywins-acb4f/locations/us-central1/functions/migrateUsersToTypesense","buildConfig":{"runtime":"nodejs20","entryPoint":"migrateUsersToTypesense","source":{"storageSource":{"bucket":"gcf-v2-sources-142115352134-us-central1","object":"migrateUsersToTypesense/function-source.zip","generation":"1736978265890200"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/selfadvocacywins-acb4f/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-142115352134-us-central1","object":"migrateUsersToTypesense/function-source.zip","generation":"1736977754025414"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/selfadvocacywins-acb4f/serviceAccounts/142115352134-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"serviceConfig":{"service":"projects/selfadvocacywins-acb4f/locations/us-central1/services/migrateuserstotypesense","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"selfadvocacywins-acb4f\",\"storageBucket\":\"selfadvocacywins-acb4f.firebasestorage.app\"}","GCLOUD_PROJECT":"selfadvocacywins-acb4f","EVENTARC_CLOUD_EVENT_SOURCE":"projects/selfadvocacywins-acb4f/locations/us-central1/services/migrateUsersToTypesense","FUNCTION_TARGET":"migrateUsersToTypesense","LOG_EXECUTION_ID":"true"},"ingressSettings":"ALLOW_ALL","uri":"https://migrateuserstotypesense-wbtmyiwspq-uc.a.run.app","serviceAccountEmail":"142115352134-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"migrateuserstotypesense-00006-hek","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"ACTIVE","labels":{"deployment-tool":"cli-firebase","firebase-functions-hash":"f4e7e061e2d354bdd8f9cbd69ee779058b1e61a2"},"environment":"GEN_2","url":"https://us-central1-selfadvocacywins-acb4f.cloudfunctions.net/migrateUsersToTypesense"},"stages":[{"name":"BUILD","message":"Build in progress","state":"IN_PROGRESS","resource":"projects/142115352134/locations/us-central1/builds/2a4c4697-490e-48c4-b8f9-a9adedca91ec","resourceUri":"https://console.cloud.google.com/cloud-build/builds;region=us-central1/2a4c4697-490e-48c4-b8f9-a9adedca91ec?project=142115352134"},{"name":"SERVICE","state":"NOT_STARTED"}],"operationType":"UPDATE_FUNCTION","buildName":"projects/142115352134/locations/us-central1/builds/2a4c4697-490e-48c4-b8f9-a9adedca91ec"},"done":false}
[debug] [2025-01-15T21:57:47.962Z] [update-default-us-central1-migrateUsersToTypesense] Retrying task index 0
[debug] [2025-01-15T21:57:47.964Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:47.964Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:47.964Z] >>> [apiv2][query] GET https://cloudfunctions.googleapis.com/v2/projects/selfadvocacywins-acb4f/locations/us-central1/operations/operation-1736978264828-62bc5c4752c35-c1a28314-580be0c1 [none]
[debug] [2025-01-15T21:57:48.213Z] <<< [apiv2][status] GET https://cloudfunctions.googleapis.com/v2/projects/selfadvocacywins-acb4f/locations/us-central1/operations/operation-1736978264828-62bc5c4752c35-c1a28314-580be0c1 200
[debug] [2025-01-15T21:57:48.214Z] <<< [apiv2][body] GET https://cloudfunctions.googleapis.com/v2/projects/selfadvocacywins-acb4f/locations/us-central1/operations/operation-1736978264828-62bc5c4752c35-c1a28314-580be0c1 {"name":"projects/selfadvocacywins-acb4f/locations/us-central1/operations/operation-1736978264828-62bc5c4752c35-c1a28314-580be0c1","metadata":{"@type":"type.googleapis.com/google.cloud.functions.v2.OperationMetadata","createTime":"2025-01-15T21:57:45.936395664Z","target":"projects/selfadvocacywins-acb4f/locations/us-central1/functions/migrateUsersToTypesense","verb":"update","cancelRequested":false,"apiVersion":"v2","requestResource":{"@type":"type.googleapis.com/google.cloud.functions.v2.Function","name":"projects/selfadvocacywins-acb4f/locations/us-central1/functions/migrateUsersToTypesense","buildConfig":{"runtime":"nodejs20","entryPoint":"migrateUsersToTypesense","source":{"storageSource":{"bucket":"gcf-v2-sources-142115352134-us-central1","object":"migrateUsersToTypesense/function-source.zip","generation":"1736978265890200"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/selfadvocacywins-acb4f/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-142115352134-us-central1","object":"migrateUsersToTypesense/function-source.zip","generation":"1736977754025414"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/selfadvocacywins-acb4f/serviceAccounts/142115352134-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"serviceConfig":{"service":"projects/selfadvocacywins-acb4f/locations/us-central1/services/migrateuserstotypesense","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"selfadvocacywins-acb4f\",\"storageBucket\":\"selfadvocacywins-acb4f.firebasestorage.app\"}","GCLOUD_PROJECT":"selfadvocacywins-acb4f","EVENTARC_CLOUD_EVENT_SOURCE":"projects/selfadvocacywins-acb4f/locations/us-central1/services/migrateUsersToTypesense","FUNCTION_TARGET":"migrateUsersToTypesense","LOG_EXECUTION_ID":"true"},"ingressSettings":"ALLOW_ALL","uri":"https://migrateuserstotypesense-wbtmyiwspq-uc.a.run.app","serviceAccountEmail":"142115352134-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"migrateuserstotypesense-00006-hek","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"ACTIVE","labels":{"deployment-tool":"cli-firebase","firebase-functions-hash":"f4e7e061e2d354bdd8f9cbd69ee779058b1e61a2"},"environment":"GEN_2","url":"https://us-central1-selfadvocacywins-acb4f.cloudfunctions.net/migrateUsersToTypesense"},"stages":[{"name":"BUILD","message":"Build in progress","state":"IN_PROGRESS","resource":"projects/142115352134/locations/us-central1/builds/2a4c4697-490e-48c4-b8f9-a9adedca91ec","resourceUri":"https://console.cloud.google.com/cloud-build/builds;region=us-central1/2a4c4697-490e-48c4-b8f9-a9adedca91ec?project=142115352134"},{"name":"SERVICE","state":"NOT_STARTED"}],"operationType":"UPDATE_FUNCTION","buildName":"projects/142115352134/locations/us-central1/builds/2a4c4697-490e-48c4-b8f9-a9adedca91ec"},"done":false}
[debug] [2025-01-15T21:57:50.215Z] [update-default-us-central1-migrateUsersToTypesense] Retrying task index 0
[debug] [2025-01-15T21:57:50.216Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:50.216Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:50.216Z] >>> [apiv2][query] GET https://cloudfunctions.googleapis.com/v2/projects/selfadvocacywins-acb4f/locations/us-central1/operations/operation-1736978264828-62bc5c4752c35-c1a28314-580be0c1 [none]
[debug] [2025-01-15T21:57:50.479Z] <<< [apiv2][status] GET https://cloudfunctions.googleapis.com/v2/projects/selfadvocacywins-acb4f/locations/us-central1/operations/operation-1736978264828-62bc5c4752c35-c1a28314-580be0c1 200
[debug] [2025-01-15T21:57:50.479Z] <<< [apiv2][body] GET https://cloudfunctions.googleapis.com/v2/projects/selfadvocacywins-acb4f/locations/us-central1/operations/operation-1736978264828-62bc5c4752c35-c1a28314-580be0c1 {"name":"projects/selfadvocacywins-acb4f/locations/us-central1/operations/operation-1736978264828-62bc5c4752c35-c1a28314-580be0c1","metadata":{"@type":"type.googleapis.com/google.cloud.functions.v2.OperationMetadata","createTime":"2025-01-15T21:57:45.936395664Z","target":"projects/selfadvocacywins-acb4f/locations/us-central1/functions/migrateUsersToTypesense","verb":"update","cancelRequested":false,"apiVersion":"v2","requestResource":{"@type":"type.googleapis.com/google.cloud.functions.v2.Function","name":"projects/selfadvocacywins-acb4f/locations/us-central1/functions/migrateUsersToTypesense","buildConfig":{"runtime":"nodejs20","entryPoint":"migrateUsersToTypesense","source":{"storageSource":{"bucket":"gcf-v2-sources-142115352134-us-central1","object":"migrateUsersToTypesense/function-source.zip","generation":"1736978265890200"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/selfadvocacywins-acb4f/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-142115352134-us-central1","object":"migrateUsersToTypesense/function-source.zip","generation":"1736977754025414"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/selfadvocacywins-acb4f/serviceAccounts/142115352134-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"serviceConfig":{"service":"projects/selfadvocacywins-acb4f/locations/us-central1/services/migrateuserstotypesense","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"selfadvocacywins-acb4f\",\"storageBucket\":\"selfadvocacywins-acb4f.firebasestorage.app\"}","GCLOUD_PROJECT":"selfadvocacywins-acb4f","EVENTARC_CLOUD_EVENT_SOURCE":"projects/selfadvocacywins-acb4f/locations/us-central1/services/migrateUsersToTypesense","FUNCTION_TARGET":"migrateUsersToTypesense","LOG_EXECUTION_ID":"true"},"ingressSettings":"ALLOW_ALL","uri":"https://migrateuserstotypesense-wbtmyiwspq-uc.a.run.app","serviceAccountEmail":"142115352134-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"migrateuserstotypesense-00006-hek","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"ACTIVE","labels":{"deployment-tool":"cli-firebase","firebase-functions-hash":"f4e7e061e2d354bdd8f9cbd69ee779058b1e61a2"},"environment":"GEN_2","url":"https://us-central1-selfadvocacywins-acb4f.cloudfunctions.net/migrateUsersToTypesense"},"stages":[{"name":"BUILD","message":"Build in progress","state":"IN_PROGRESS","resource":"projects/142115352134/locations/us-central1/builds/2a4c4697-490e-48c4-b8f9-a9adedca91ec","resourceUri":"https://console.cloud.google.com/cloud-build/builds;region=us-central1/2a4c4697-490e-48c4-b8f9-a9adedca91ec?project=142115352134"},{"name":"SERVICE","state":"NOT_STARTED"}],"operationType":"UPDATE_FUNCTION","buildName":"projects/142115352134/locations/us-central1/builds/2a4c4697-490e-48c4-b8f9-a9adedca91ec"},"done":false}
[debug] [2025-01-15T21:57:54.481Z] [update-default-us-central1-migrateUsersToTypesense] Retrying task index 0
[debug] [2025-01-15T21:57:54.481Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:54.481Z] Checked if tokens are valid: true, expires at: 1736980325999
[debug] [2025-01-15T21:57:54.482Z] >>> [apiv2][query] GET https://cloudfunctions.googleapis.com/v2/projects/selfadvocacywins-acb4f/locations/us-central1/operations/operation-1736978264828-62bc5c4752c35-c1a28314-580be0c1 [none]
[debug] [2025-01-15T21:57:54.692Z] <<< [apiv2][status] GET https://cloudfunctions.googleapis.com/v2/projects/selfadvocacywins-acb4f/locations/us-central1/operations/operation-1736978264828-62bc5c4752c35-c1a28314-580be0c1 200
[debug] [2025-01-15T21:57:54.692Z] <<< [apiv2][body] GET https://cloudfunctions.googleapis.com/v2/projects/selfadvocacywins-acb4f/locations/us-central1/operations/operation-1736978264828-62bc5c4752c35-c1a28314-580be0c1 {"name":"projects/selfadvocacywins-acb4f/locations/us-central1/operations/operation-1736978264828-62bc5c4752c35-c1a28314-580be0c1","metadata":{"@type":"type.googleapis.com/google.cloud.functions.v2.OperationMetadata","createTime":"2025-01-15T21:57:45.936395664Z","target":"projects/selfadvocacywins-acb4f/locations/us-central1/functions/migrateUsersToTypesense","verb":"update","cancelRequested":false,"apiVersion":"v2","requestResource":{"@type":"type.googleapis.com/google.cloud.functions.v2.Function","name":"projects/selfadvocacywins-acb4f/locations/us-central1/functions/migrateUsersToTypesense","buildConfig":{"runtime":"nodejs20","entryPoint":"migrateUsersToTypesense","source":{"storageSource":{"bucket":"gcf-v2-sources-142115352134-us-central1","object":"migrateUsersToTypesense/function-source.zip","generation":"1736978265890200"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/selfadvocacywins-acb4f/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-142115352134-us-central1","object":"migrateUsersToTypesense/function-source.zip","generation":"1736977754025414"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/selfadvocacywins-acb4f/serviceAccounts/142115352134-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"serviceConfig":{"service":"projects/selfadvocacywins-acb4f/locations/us-central1/services/migrateuserstotypesense","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"selfadvocacywins-acb4f\",\"storageBucket\":\"selfadvocacywins-acb4f.firebasestorage.app\"}","GCLOUD_PROJECT":"selfadvocacywins-acb4f","EVENTARC_CLOUD_EVENT_SOURCE":"projects/selfadvocacywins-acb4f/locations/us-central1/services/migrateUsersToTypesense","FUNCTION_TARGET":"migrateUsersToTypesense","LOG_EXECUTION_ID":"true"},"ingressSettings":"ALLOW_ALL","uri":"https://migrateuserstotypesense-wbtmyiwspq-uc.a.run.app","serviceAccountEmail":"142115352134-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"migrateuserstotypesense-00006-hek","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"ACTIVE","labels":{"deployment-tool":"cli-firebase","firebase-functions-hash":"f4e7e061e2d354bdd8f9cbd69ee779058b1e61a2"},"environment":"GEN_2","url":"https://us-central1-selfadvocacywins-acb4f.cloudfunctions.net/migrateUsersToTypesense"},"stages":[{"name":"BUILD","message":"Build in progress","state":"IN_PROGRESS","resource":"projects/142115352134/locations/us-central1/builds/2a4c4697-490e-48c4-b8f9-a9adedca91ec","resourceUri":"https://console.cloud.google.com/cloud-build/builds;region=us-central1/2a4c4697-490e-48c4-b8f9-a9adedca91ec?project=142115352134"},{"name":"SERVICE","state":"NOT_STARTED"}],"operationType":"UPDATE_FUNCTION","buildName":"projects/142115352134/locations/us-central1/builds/2a4c4697-490e-48c4-b8f9-a9adedca91ec"},"done":false}
